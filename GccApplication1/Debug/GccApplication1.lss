
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000022c0  00002354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800082  00800082  00002376  2**0
                  ALLOC
  3 .stab         00002448  00000000  00000000  00002378  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007ca  00000000  00000000  000047c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004f90  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011ce  00000000  00000000  000050f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000440  00000000  00000000  000062be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cde  00000000  00000000  000066fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  000073dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002be  00000000  00000000  000076d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005c7  00000000  00000000  0000798e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 15 08 	jmp	0x102a	; 0x102a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 28 03 	call	0x650	; 0x650 <main>
      8a:	0c 94 5e 11 	jmp	0x22bc	; 0x22bc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_setdir>:

#include <avr/io.h>
#include "macros.h"

	void DIO_setdir (unsigned char portname, unsigned char pinnumber, unsigned char direction)
	{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <DIO_setdir+0x6>
      98:	0f 92       	push	r0
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	89 83       	std	Y+1, r24	; 0x01
      a0:	6a 83       	std	Y+2, r22	; 0x02
      a2:	4b 83       	std	Y+3, r20	; 0x03
		switch(portname)
      a4:	89 81       	ldd	r24, Y+1	; 0x01
      a6:	88 2f       	mov	r24, r24
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	82 34       	cpi	r24, 0x42	; 66
      ac:	91 05       	cpc	r25, r1
      ae:	09 f4       	brne	.+2      	; 0xb2 <DIO_setdir+0x20>
      b0:	40 c0       	rjmp	.+128    	; 0x132 <DIO_setdir+0xa0>
      b2:	83 34       	cpi	r24, 0x43	; 67
      b4:	91 05       	cpc	r25, r1
      b6:	24 f4       	brge	.+8      	; 0xc0 <DIO_setdir+0x2e>
      b8:	81 34       	cpi	r24, 0x41	; 65
      ba:	91 05       	cpc	r25, r1
      bc:	51 f0       	breq	.+20     	; 0xd2 <DIO_setdir+0x40>
      be:	c9 c0       	rjmp	.+402    	; 0x252 <DIO_setdir+0x1c0>
      c0:	83 34       	cpi	r24, 0x43	; 67
      c2:	91 05       	cpc	r25, r1
      c4:	09 f4       	brne	.+2      	; 0xc8 <DIO_setdir+0x36>
      c6:	65 c0       	rjmp	.+202    	; 0x192 <DIO_setdir+0x100>
      c8:	84 34       	cpi	r24, 0x44	; 68
      ca:	91 05       	cpc	r25, r1
      cc:	09 f4       	brne	.+2      	; 0xd0 <DIO_setdir+0x3e>
      ce:	91 c0       	rjmp	.+290    	; 0x1f2 <DIO_setdir+0x160>
      d0:	c0 c0       	rjmp	.+384    	; 0x252 <DIO_setdir+0x1c0>
		{
			case 'A':
			if (direction==1)
      d2:	8b 81       	ldd	r24, Y+3	; 0x03
      d4:	81 30       	cpi	r24, 0x01	; 1
      d6:	b1 f4       	brne	.+44     	; 0x104 <DIO_setdir+0x72>
			{
				SET_BIT(DDRA,pinnumber);	
      d8:	8a e3       	ldi	r24, 0x3A	; 58
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	2a e3       	ldi	r18, 0x3A	; 58
      de:	30 e0       	ldi	r19, 0x00	; 0
      e0:	f9 01       	movw	r30, r18
      e2:	20 81       	ld	r18, Z
      e4:	62 2f       	mov	r22, r18
      e6:	2a 81       	ldd	r18, Y+2	; 0x02
      e8:	42 2f       	mov	r20, r18
      ea:	50 e0       	ldi	r21, 0x00	; 0
      ec:	21 e0       	ldi	r18, 0x01	; 1
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	04 2e       	mov	r0, r20
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_setdir+0x66>
      f4:	22 0f       	add	r18, r18
      f6:	33 1f       	adc	r19, r19
      f8:	0a 94       	dec	r0
      fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_setdir+0x62>
      fc:	26 2b       	or	r18, r22
      fe:	fc 01       	movw	r30, r24
     100:	20 83       	st	Z, r18
			
			else
			{
				CLR_BIT(DDRA,pinnumber);
			}
			break;
     102:	a8 c0       	rjmp	.+336    	; 0x254 <DIO_setdir+0x1c2>
				SET_BIT(DDRA,pinnumber);	
			}
			
			else
			{
				CLR_BIT(DDRA,pinnumber);
     104:	8a e3       	ldi	r24, 0x3A	; 58
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	2a e3       	ldi	r18, 0x3A	; 58
     10a:	30 e0       	ldi	r19, 0x00	; 0
     10c:	f9 01       	movw	r30, r18
     10e:	20 81       	ld	r18, Z
     110:	62 2f       	mov	r22, r18
     112:	2a 81       	ldd	r18, Y+2	; 0x02
     114:	42 2f       	mov	r20, r18
     116:	50 e0       	ldi	r21, 0x00	; 0
     118:	21 e0       	ldi	r18, 0x01	; 1
     11a:	30 e0       	ldi	r19, 0x00	; 0
     11c:	04 2e       	mov	r0, r20
     11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_setdir+0x92>
     120:	22 0f       	add	r18, r18
     122:	33 1f       	adc	r19, r19
     124:	0a 94       	dec	r0
     126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_setdir+0x8e>
     128:	20 95       	com	r18
     12a:	26 23       	and	r18, r22
     12c:	fc 01       	movw	r30, r24
     12e:	20 83       	st	Z, r18
			}
			break;
     130:	91 c0       	rjmp	.+290    	; 0x254 <DIO_setdir+0x1c2>
			
			case 'B':
			if (direction==1)
     132:	8b 81       	ldd	r24, Y+3	; 0x03
     134:	81 30       	cpi	r24, 0x01	; 1
     136:	b1 f4       	brne	.+44     	; 0x164 <DIO_setdir+0xd2>
			{
				SET_BIT(DDRB,pinnumber);
     138:	87 e3       	ldi	r24, 0x37	; 55
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	27 e3       	ldi	r18, 0x37	; 55
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	f9 01       	movw	r30, r18
     142:	20 81       	ld	r18, Z
     144:	62 2f       	mov	r22, r18
     146:	2a 81       	ldd	r18, Y+2	; 0x02
     148:	42 2f       	mov	r20, r18
     14a:	50 e0       	ldi	r21, 0x00	; 0
     14c:	21 e0       	ldi	r18, 0x01	; 1
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	04 2e       	mov	r0, r20
     152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_setdir+0xc6>
     154:	22 0f       	add	r18, r18
     156:	33 1f       	adc	r19, r19
     158:	0a 94       	dec	r0
     15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_setdir+0xc2>
     15c:	26 2b       	or	r18, r22
     15e:	fc 01       	movw	r30, r24
     160:	20 83       	st	Z, r18
			
			else
			{
				CLR_BIT(DDRB,pinnumber);
			}
			break;
     162:	78 c0       	rjmp	.+240    	; 0x254 <DIO_setdir+0x1c2>
				SET_BIT(DDRB,pinnumber);
			}
			
			else
			{
				CLR_BIT(DDRB,pinnumber);
     164:	87 e3       	ldi	r24, 0x37	; 55
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	27 e3       	ldi	r18, 0x37	; 55
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	f9 01       	movw	r30, r18
     16e:	20 81       	ld	r18, Z
     170:	62 2f       	mov	r22, r18
     172:	2a 81       	ldd	r18, Y+2	; 0x02
     174:	42 2f       	mov	r20, r18
     176:	50 e0       	ldi	r21, 0x00	; 0
     178:	21 e0       	ldi	r18, 0x01	; 1
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	04 2e       	mov	r0, r20
     17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_setdir+0xf2>
     180:	22 0f       	add	r18, r18
     182:	33 1f       	adc	r19, r19
     184:	0a 94       	dec	r0
     186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_setdir+0xee>
     188:	20 95       	com	r18
     18a:	26 23       	and	r18, r22
     18c:	fc 01       	movw	r30, r24
     18e:	20 83       	st	Z, r18
			}
			break;
     190:	61 c0       	rjmp	.+194    	; 0x254 <DIO_setdir+0x1c2>
			
			case 'C':
			if (direction==1)
     192:	8b 81       	ldd	r24, Y+3	; 0x03
     194:	81 30       	cpi	r24, 0x01	; 1
     196:	b1 f4       	brne	.+44     	; 0x1c4 <DIO_setdir+0x132>
			{
				SET_BIT(DDRC,pinnumber);
     198:	84 e3       	ldi	r24, 0x34	; 52
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	24 e3       	ldi	r18, 0x34	; 52
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	f9 01       	movw	r30, r18
     1a2:	20 81       	ld	r18, Z
     1a4:	62 2f       	mov	r22, r18
     1a6:	2a 81       	ldd	r18, Y+2	; 0x02
     1a8:	42 2f       	mov	r20, r18
     1aa:	50 e0       	ldi	r21, 0x00	; 0
     1ac:	21 e0       	ldi	r18, 0x01	; 1
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	04 2e       	mov	r0, r20
     1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_setdir+0x126>
     1b4:	22 0f       	add	r18, r18
     1b6:	33 1f       	adc	r19, r19
     1b8:	0a 94       	dec	r0
     1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_setdir+0x122>
     1bc:	26 2b       	or	r18, r22
     1be:	fc 01       	movw	r30, r24
     1c0:	20 83       	st	Z, r18
			
			else
			{
				CLR_BIT(DDRC,pinnumber);
			}
			break;
     1c2:	48 c0       	rjmp	.+144    	; 0x254 <DIO_setdir+0x1c2>
				SET_BIT(DDRC,pinnumber);
			}
			
			else
			{
				CLR_BIT(DDRC,pinnumber);
     1c4:	84 e3       	ldi	r24, 0x34	; 52
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	24 e3       	ldi	r18, 0x34	; 52
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	f9 01       	movw	r30, r18
     1ce:	20 81       	ld	r18, Z
     1d0:	62 2f       	mov	r22, r18
     1d2:	2a 81       	ldd	r18, Y+2	; 0x02
     1d4:	42 2f       	mov	r20, r18
     1d6:	50 e0       	ldi	r21, 0x00	; 0
     1d8:	21 e0       	ldi	r18, 0x01	; 1
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	04 2e       	mov	r0, r20
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_setdir+0x152>
     1e0:	22 0f       	add	r18, r18
     1e2:	33 1f       	adc	r19, r19
     1e4:	0a 94       	dec	r0
     1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_setdir+0x14e>
     1e8:	20 95       	com	r18
     1ea:	26 23       	and	r18, r22
     1ec:	fc 01       	movw	r30, r24
     1ee:	20 83       	st	Z, r18
			}
			break;
     1f0:	31 c0       	rjmp	.+98     	; 0x254 <DIO_setdir+0x1c2>
			
			case 'D':
			if (direction==1)
     1f2:	8b 81       	ldd	r24, Y+3	; 0x03
     1f4:	81 30       	cpi	r24, 0x01	; 1
     1f6:	b1 f4       	brne	.+44     	; 0x224 <DIO_setdir+0x192>
			{
				SET_BIT(DDRD,pinnumber);
     1f8:	81 e3       	ldi	r24, 0x31	; 49
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	21 e3       	ldi	r18, 0x31	; 49
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	f9 01       	movw	r30, r18
     202:	20 81       	ld	r18, Z
     204:	62 2f       	mov	r22, r18
     206:	2a 81       	ldd	r18, Y+2	; 0x02
     208:	42 2f       	mov	r20, r18
     20a:	50 e0       	ldi	r21, 0x00	; 0
     20c:	21 e0       	ldi	r18, 0x01	; 1
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	04 2e       	mov	r0, r20
     212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_setdir+0x186>
     214:	22 0f       	add	r18, r18
     216:	33 1f       	adc	r19, r19
     218:	0a 94       	dec	r0
     21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_setdir+0x182>
     21c:	26 2b       	or	r18, r22
     21e:	fc 01       	movw	r30, r24
     220:	20 83       	st	Z, r18
			
			else
			{
				CLR_BIT(DDRD,pinnumber);
			}
			break;
     222:	18 c0       	rjmp	.+48     	; 0x254 <DIO_setdir+0x1c2>
				SET_BIT(DDRD,pinnumber);
			}
			
			else
			{
				CLR_BIT(DDRD,pinnumber);
     224:	81 e3       	ldi	r24, 0x31	; 49
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	21 e3       	ldi	r18, 0x31	; 49
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	f9 01       	movw	r30, r18
     22e:	20 81       	ld	r18, Z
     230:	62 2f       	mov	r22, r18
     232:	2a 81       	ldd	r18, Y+2	; 0x02
     234:	42 2f       	mov	r20, r18
     236:	50 e0       	ldi	r21, 0x00	; 0
     238:	21 e0       	ldi	r18, 0x01	; 1
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	04 2e       	mov	r0, r20
     23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_setdir+0x1b2>
     240:	22 0f       	add	r18, r18
     242:	33 1f       	adc	r19, r19
     244:	0a 94       	dec	r0
     246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_setdir+0x1ae>
     248:	20 95       	com	r18
     24a:	26 23       	and	r18, r22
     24c:	fc 01       	movw	r30, r24
     24e:	20 83       	st	Z, r18
			}
			break;
     250:	01 c0       	rjmp	.+2      	; 0x254 <DIO_setdir+0x1c2>
			default:
			break;
     252:	00 00       	nop
		}
	}
     254:	0f 90       	pop	r0
     256:	0f 90       	pop	r0
     258:	0f 90       	pop	r0
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <DIO_write>:
	
	void DIO_write (unsigned char portname, unsigned char pinnumber, unsigned char outval)
	{
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	00 d0       	rcall	.+0      	; 0x266 <DIO_write+0x6>
     266:	0f 92       	push	r0
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
     26c:	89 83       	std	Y+1, r24	; 0x01
     26e:	6a 83       	std	Y+2, r22	; 0x02
     270:	4b 83       	std	Y+3, r20	; 0x03
		switch (portname)
     272:	89 81       	ldd	r24, Y+1	; 0x01
     274:	88 2f       	mov	r24, r24
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	82 34       	cpi	r24, 0x42	; 66
     27a:	91 05       	cpc	r25, r1
     27c:	09 f4       	brne	.+2      	; 0x280 <DIO_write+0x20>
     27e:	40 c0       	rjmp	.+128    	; 0x300 <DIO_write+0xa0>
     280:	83 34       	cpi	r24, 0x43	; 67
     282:	91 05       	cpc	r25, r1
     284:	24 f4       	brge	.+8      	; 0x28e <DIO_write+0x2e>
     286:	81 34       	cpi	r24, 0x41	; 65
     288:	91 05       	cpc	r25, r1
     28a:	51 f0       	breq	.+20     	; 0x2a0 <DIO_write+0x40>
     28c:	c9 c0       	rjmp	.+402    	; 0x420 <DIO_write+0x1c0>
     28e:	83 34       	cpi	r24, 0x43	; 67
     290:	91 05       	cpc	r25, r1
     292:	09 f4       	brne	.+2      	; 0x296 <DIO_write+0x36>
     294:	65 c0       	rjmp	.+202    	; 0x360 <DIO_write+0x100>
     296:	84 34       	cpi	r24, 0x44	; 68
     298:	91 05       	cpc	r25, r1
     29a:	09 f4       	brne	.+2      	; 0x29e <DIO_write+0x3e>
     29c:	91 c0       	rjmp	.+290    	; 0x3c0 <DIO_write+0x160>
     29e:	c0 c0       	rjmp	.+384    	; 0x420 <DIO_write+0x1c0>
		{
			case 'A':
			if (outval==1)
     2a0:	8b 81       	ldd	r24, Y+3	; 0x03
     2a2:	81 30       	cpi	r24, 0x01	; 1
     2a4:	b1 f4       	brne	.+44     	; 0x2d2 <DIO_write+0x72>
			{
				SET_BIT(PORTA,pinnumber);
     2a6:	8b e3       	ldi	r24, 0x3B	; 59
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	2b e3       	ldi	r18, 0x3B	; 59
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	f9 01       	movw	r30, r18
     2b0:	20 81       	ld	r18, Z
     2b2:	62 2f       	mov	r22, r18
     2b4:	2a 81       	ldd	r18, Y+2	; 0x02
     2b6:	42 2f       	mov	r20, r18
     2b8:	50 e0       	ldi	r21, 0x00	; 0
     2ba:	21 e0       	ldi	r18, 0x01	; 1
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	04 2e       	mov	r0, r20
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_write+0x66>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	0a 94       	dec	r0
     2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_write+0x62>
     2ca:	26 2b       	or	r18, r22
     2cc:	fc 01       	movw	r30, r24
     2ce:	20 83       	st	Z, r18
			
			else
			{
				CLR_BIT(PORTA,pinnumber);
			}
			break;
     2d0:	a8 c0       	rjmp	.+336    	; 0x422 <DIO_write+0x1c2>
				SET_BIT(PORTA,pinnumber);
			}
			
			else
			{
				CLR_BIT(PORTA,pinnumber);
     2d2:	8b e3       	ldi	r24, 0x3B	; 59
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	2b e3       	ldi	r18, 0x3B	; 59
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	f9 01       	movw	r30, r18
     2dc:	20 81       	ld	r18, Z
     2de:	62 2f       	mov	r22, r18
     2e0:	2a 81       	ldd	r18, Y+2	; 0x02
     2e2:	42 2f       	mov	r20, r18
     2e4:	50 e0       	ldi	r21, 0x00	; 0
     2e6:	21 e0       	ldi	r18, 0x01	; 1
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	04 2e       	mov	r0, r20
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_write+0x92>
     2ee:	22 0f       	add	r18, r18
     2f0:	33 1f       	adc	r19, r19
     2f2:	0a 94       	dec	r0
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_write+0x8e>
     2f6:	20 95       	com	r18
     2f8:	26 23       	and	r18, r22
     2fa:	fc 01       	movw	r30, r24
     2fc:	20 83       	st	Z, r18
			}
			break;
     2fe:	91 c0       	rjmp	.+290    	; 0x422 <DIO_write+0x1c2>
			
			case 'B':
			if (outval==1)
     300:	8b 81       	ldd	r24, Y+3	; 0x03
     302:	81 30       	cpi	r24, 0x01	; 1
     304:	b1 f4       	brne	.+44     	; 0x332 <DIO_write+0xd2>
			{
				SET_BIT(PORTB,pinnumber);
     306:	88 e3       	ldi	r24, 0x38	; 56
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	28 e3       	ldi	r18, 0x38	; 56
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	f9 01       	movw	r30, r18
     310:	20 81       	ld	r18, Z
     312:	62 2f       	mov	r22, r18
     314:	2a 81       	ldd	r18, Y+2	; 0x02
     316:	42 2f       	mov	r20, r18
     318:	50 e0       	ldi	r21, 0x00	; 0
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	04 2e       	mov	r0, r20
     320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_write+0xc6>
     322:	22 0f       	add	r18, r18
     324:	33 1f       	adc	r19, r19
     326:	0a 94       	dec	r0
     328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_write+0xc2>
     32a:	26 2b       	or	r18, r22
     32c:	fc 01       	movw	r30, r24
     32e:	20 83       	st	Z, r18
			
			else
			{
				CLR_BIT(PORTB,pinnumber);
			}
			break;
     330:	78 c0       	rjmp	.+240    	; 0x422 <DIO_write+0x1c2>
				SET_BIT(PORTB,pinnumber);
			}
			
			else
			{
				CLR_BIT(PORTB,pinnumber);
     332:	88 e3       	ldi	r24, 0x38	; 56
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	28 e3       	ldi	r18, 0x38	; 56
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	f9 01       	movw	r30, r18
     33c:	20 81       	ld	r18, Z
     33e:	62 2f       	mov	r22, r18
     340:	2a 81       	ldd	r18, Y+2	; 0x02
     342:	42 2f       	mov	r20, r18
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	21 e0       	ldi	r18, 0x01	; 1
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	04 2e       	mov	r0, r20
     34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_write+0xf2>
     34e:	22 0f       	add	r18, r18
     350:	33 1f       	adc	r19, r19
     352:	0a 94       	dec	r0
     354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_write+0xee>
     356:	20 95       	com	r18
     358:	26 23       	and	r18, r22
     35a:	fc 01       	movw	r30, r24
     35c:	20 83       	st	Z, r18
			}
			break;
     35e:	61 c0       	rjmp	.+194    	; 0x422 <DIO_write+0x1c2>
			
			case 'C':
			if (outval==1)
     360:	8b 81       	ldd	r24, Y+3	; 0x03
     362:	81 30       	cpi	r24, 0x01	; 1
     364:	b1 f4       	brne	.+44     	; 0x392 <DIO_write+0x132>
			{
				SET_BIT(PORTC,pinnumber);
     366:	85 e3       	ldi	r24, 0x35	; 53
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	25 e3       	ldi	r18, 0x35	; 53
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	f9 01       	movw	r30, r18
     370:	20 81       	ld	r18, Z
     372:	62 2f       	mov	r22, r18
     374:	2a 81       	ldd	r18, Y+2	; 0x02
     376:	42 2f       	mov	r20, r18
     378:	50 e0       	ldi	r21, 0x00	; 0
     37a:	21 e0       	ldi	r18, 0x01	; 1
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	04 2e       	mov	r0, r20
     380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_write+0x126>
     382:	22 0f       	add	r18, r18
     384:	33 1f       	adc	r19, r19
     386:	0a 94       	dec	r0
     388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_write+0x122>
     38a:	26 2b       	or	r18, r22
     38c:	fc 01       	movw	r30, r24
     38e:	20 83       	st	Z, r18
			
			else
			{
				CLR_BIT(PORTC,pinnumber);
			}
			break;
     390:	48 c0       	rjmp	.+144    	; 0x422 <DIO_write+0x1c2>
				SET_BIT(PORTC,pinnumber);
			}
			
			else
			{
				CLR_BIT(PORTC,pinnumber);
     392:	85 e3       	ldi	r24, 0x35	; 53
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	25 e3       	ldi	r18, 0x35	; 53
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	f9 01       	movw	r30, r18
     39c:	20 81       	ld	r18, Z
     39e:	62 2f       	mov	r22, r18
     3a0:	2a 81       	ldd	r18, Y+2	; 0x02
     3a2:	42 2f       	mov	r20, r18
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	21 e0       	ldi	r18, 0x01	; 1
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	04 2e       	mov	r0, r20
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_write+0x152>
     3ae:	22 0f       	add	r18, r18
     3b0:	33 1f       	adc	r19, r19
     3b2:	0a 94       	dec	r0
     3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_write+0x14e>
     3b6:	20 95       	com	r18
     3b8:	26 23       	and	r18, r22
     3ba:	fc 01       	movw	r30, r24
     3bc:	20 83       	st	Z, r18
			}
			break;
     3be:	31 c0       	rjmp	.+98     	; 0x422 <DIO_write+0x1c2>
			
			case 'D':
			if (outval==1)
     3c0:	8b 81       	ldd	r24, Y+3	; 0x03
     3c2:	81 30       	cpi	r24, 0x01	; 1
     3c4:	b1 f4       	brne	.+44     	; 0x3f2 <DIO_write+0x192>
			{
				SET_BIT(PORTD,pinnumber);
     3c6:	82 e3       	ldi	r24, 0x32	; 50
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	22 e3       	ldi	r18, 0x32	; 50
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	f9 01       	movw	r30, r18
     3d0:	20 81       	ld	r18, Z
     3d2:	62 2f       	mov	r22, r18
     3d4:	2a 81       	ldd	r18, Y+2	; 0x02
     3d6:	42 2f       	mov	r20, r18
     3d8:	50 e0       	ldi	r21, 0x00	; 0
     3da:	21 e0       	ldi	r18, 0x01	; 1
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	04 2e       	mov	r0, r20
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_write+0x186>
     3e2:	22 0f       	add	r18, r18
     3e4:	33 1f       	adc	r19, r19
     3e6:	0a 94       	dec	r0
     3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_write+0x182>
     3ea:	26 2b       	or	r18, r22
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 83       	st	Z, r18
			
			else
			{
				CLR_BIT(PORTD,pinnumber);
			}
			break;
     3f0:	18 c0       	rjmp	.+48     	; 0x422 <DIO_write+0x1c2>
				SET_BIT(PORTD,pinnumber);
			}
			
			else
			{
				CLR_BIT(PORTD,pinnumber);
     3f2:	82 e3       	ldi	r24, 0x32	; 50
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	22 e3       	ldi	r18, 0x32	; 50
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	f9 01       	movw	r30, r18
     3fc:	20 81       	ld	r18, Z
     3fe:	62 2f       	mov	r22, r18
     400:	2a 81       	ldd	r18, Y+2	; 0x02
     402:	42 2f       	mov	r20, r18
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	21 e0       	ldi	r18, 0x01	; 1
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	04 2e       	mov	r0, r20
     40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_write+0x1b2>
     40e:	22 0f       	add	r18, r18
     410:	33 1f       	adc	r19, r19
     412:	0a 94       	dec	r0
     414:	e2 f7       	brpl	.-8      	; 0x40e <DIO_write+0x1ae>
     416:	20 95       	com	r18
     418:	26 23       	and	r18, r22
     41a:	fc 01       	movw	r30, r24
     41c:	20 83       	st	Z, r18
			}
			break;
     41e:	01 c0       	rjmp	.+2      	; 0x422 <DIO_write+0x1c2>
			default:
			break;
     420:	00 00       	nop
		}
	}
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <DIO_read>:
	
	unsigned char DIO_read (unsigned char portname, unsigned char pinnumber)
	{	
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	00 d0       	rcall	.+0      	; 0x434 <DIO_read+0x6>
     434:	0f 92       	push	r0
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	8a 83       	std	Y+2, r24	; 0x02
     43c:	6b 83       	std	Y+3, r22	; 0x03
		unsigned char return_value=0;
     43e:	19 82       	std	Y+1, r1	; 0x01
		
		switch (portname)
     440:	8a 81       	ldd	r24, Y+2	; 0x02
     442:	88 2f       	mov	r24, r24
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	82 34       	cpi	r24, 0x42	; 66
     448:	91 05       	cpc	r25, r1
     44a:	71 f1       	breq	.+92     	; 0x4a8 <DIO_read+0x7a>
     44c:	83 34       	cpi	r24, 0x43	; 67
     44e:	91 05       	cpc	r25, r1
     450:	24 f4       	brge	.+8      	; 0x45a <DIO_read+0x2c>
     452:	81 34       	cpi	r24, 0x41	; 65
     454:	91 05       	cpc	r25, r1
     456:	51 f0       	breq	.+20     	; 0x46c <DIO_read+0x3e>
     458:	81 c0       	rjmp	.+258    	; 0x55c <DIO_read+0x12e>
     45a:	83 34       	cpi	r24, 0x43	; 67
     45c:	91 05       	cpc	r25, r1
     45e:	09 f4       	brne	.+2      	; 0x462 <DIO_read+0x34>
     460:	41 c0       	rjmp	.+130    	; 0x4e4 <DIO_read+0xb6>
     462:	84 34       	cpi	r24, 0x44	; 68
     464:	91 05       	cpc	r25, r1
     466:	09 f4       	brne	.+2      	; 0x46a <DIO_read+0x3c>
     468:	5b c0       	rjmp	.+182    	; 0x520 <DIO_read+0xf2>
     46a:	78 c0       	rjmp	.+240    	; 0x55c <DIO_read+0x12e>
		{
			case 'A':
				return_value=READ_BIT(PINA,pinnumber);
     46c:	89 e3       	ldi	r24, 0x39	; 57
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	fc 01       	movw	r30, r24
     472:	80 81       	ld	r24, Z
     474:	28 2f       	mov	r18, r24
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	8b 81       	ldd	r24, Y+3	; 0x03
     47a:	48 2f       	mov	r20, r24
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	04 2e       	mov	r0, r20
     484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_read+0x5c>
     486:	88 0f       	add	r24, r24
     488:	99 1f       	adc	r25, r25
     48a:	0a 94       	dec	r0
     48c:	e2 f7       	brpl	.-8      	; 0x486 <DIO_read+0x58>
     48e:	82 23       	and	r24, r18
     490:	93 23       	and	r25, r19
     492:	2b 81       	ldd	r18, Y+3	; 0x03
     494:	22 2f       	mov	r18, r18
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	02 2e       	mov	r0, r18
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_read+0x72>
     49c:	95 95       	asr	r25
     49e:	87 95       	ror	r24
     4a0:	0a 94       	dec	r0
     4a2:	e2 f7       	brpl	.-8      	; 0x49c <DIO_read+0x6e>
     4a4:	89 83       	std	Y+1, r24	; 0x01
				break;
     4a6:	5b c0       	rjmp	.+182    	; 0x55e <DIO_read+0x130>
				
			case 'B':
			return_value=READ_BIT(PINB,pinnumber);
     4a8:	86 e3       	ldi	r24, 0x36	; 54
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	fc 01       	movw	r30, r24
     4ae:	80 81       	ld	r24, Z
     4b0:	28 2f       	mov	r18, r24
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	8b 81       	ldd	r24, Y+3	; 0x03
     4b6:	48 2f       	mov	r20, r24
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	04 2e       	mov	r0, r20
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_read+0x98>
     4c2:	88 0f       	add	r24, r24
     4c4:	99 1f       	adc	r25, r25
     4c6:	0a 94       	dec	r0
     4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_read+0x94>
     4ca:	82 23       	and	r24, r18
     4cc:	93 23       	and	r25, r19
     4ce:	2b 81       	ldd	r18, Y+3	; 0x03
     4d0:	22 2f       	mov	r18, r18
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	02 2e       	mov	r0, r18
     4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_read+0xae>
     4d8:	95 95       	asr	r25
     4da:	87 95       	ror	r24
     4dc:	0a 94       	dec	r0
     4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_read+0xaa>
     4e0:	89 83       	std	Y+1, r24	; 0x01
			break;
     4e2:	3d c0       	rjmp	.+122    	; 0x55e <DIO_read+0x130>
			
			case 'C':
			return_value=READ_BIT(PINC,pinnumber);
     4e4:	83 e3       	ldi	r24, 0x33	; 51
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	fc 01       	movw	r30, r24
     4ea:	80 81       	ld	r24, Z
     4ec:	28 2f       	mov	r18, r24
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	8b 81       	ldd	r24, Y+3	; 0x03
     4f2:	48 2f       	mov	r20, r24
     4f4:	50 e0       	ldi	r21, 0x00	; 0
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	04 2e       	mov	r0, r20
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_read+0xd4>
     4fe:	88 0f       	add	r24, r24
     500:	99 1f       	adc	r25, r25
     502:	0a 94       	dec	r0
     504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_read+0xd0>
     506:	82 23       	and	r24, r18
     508:	93 23       	and	r25, r19
     50a:	2b 81       	ldd	r18, Y+3	; 0x03
     50c:	22 2f       	mov	r18, r18
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	02 2e       	mov	r0, r18
     512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_read+0xea>
     514:	95 95       	asr	r25
     516:	87 95       	ror	r24
     518:	0a 94       	dec	r0
     51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_read+0xe6>
     51c:	89 83       	std	Y+1, r24	; 0x01
			break;
     51e:	1f c0       	rjmp	.+62     	; 0x55e <DIO_read+0x130>
			
			case 'D':
			return_value=READ_BIT(PIND,pinnumber);
     520:	80 e3       	ldi	r24, 0x30	; 48
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	fc 01       	movw	r30, r24
     526:	80 81       	ld	r24, Z
     528:	28 2f       	mov	r18, r24
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	8b 81       	ldd	r24, Y+3	; 0x03
     52e:	48 2f       	mov	r20, r24
     530:	50 e0       	ldi	r21, 0x00	; 0
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	04 2e       	mov	r0, r20
     538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_read+0x110>
     53a:	88 0f       	add	r24, r24
     53c:	99 1f       	adc	r25, r25
     53e:	0a 94       	dec	r0
     540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_read+0x10c>
     542:	82 23       	and	r24, r18
     544:	93 23       	and	r25, r19
     546:	2b 81       	ldd	r18, Y+3	; 0x03
     548:	22 2f       	mov	r18, r18
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	02 2e       	mov	r0, r18
     54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_read+0x126>
     550:	95 95       	asr	r25
     552:	87 95       	ror	r24
     554:	0a 94       	dec	r0
     556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_read+0x122>
     558:	89 83       	std	Y+1, r24	; 0x01
			break;
     55a:	01 c0       	rjmp	.+2      	; 0x55e <DIO_read+0x130>
			
			default:
			break;
     55c:	00 00       	nop
				
			
		}	
		
			return return_value;
     55e:	89 81       	ldd	r24, Y+1	; 0x01
		
	}
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <DIO_write_port>:
	
	
		
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	00 d0       	rcall	.+0      	; 0x572 <DIO_write_port+0x6>
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
     576:	89 83       	std	Y+1, r24	; 0x01
     578:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
     57a:	89 81       	ldd	r24, Y+1	; 0x01
     57c:	88 2f       	mov	r24, r24
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	82 34       	cpi	r24, 0x42	; 66
     582:	91 05       	cpc	r25, r1
     584:	a1 f0       	breq	.+40     	; 0x5ae <DIO_write_port+0x42>
     586:	83 34       	cpi	r24, 0x43	; 67
     588:	91 05       	cpc	r25, r1
     58a:	24 f4       	brge	.+8      	; 0x594 <DIO_write_port+0x28>
     58c:	81 34       	cpi	r24, 0x41	; 65
     58e:	91 05       	cpc	r25, r1
     590:	41 f0       	breq	.+16     	; 0x5a2 <DIO_write_port+0x36>
     592:	1f c0       	rjmp	.+62     	; 0x5d2 <DIO_write_port+0x66>
     594:	83 34       	cpi	r24, 0x43	; 67
     596:	91 05       	cpc	r25, r1
     598:	81 f0       	breq	.+32     	; 0x5ba <DIO_write_port+0x4e>
     59a:	84 34       	cpi	r24, 0x44	; 68
     59c:	91 05       	cpc	r25, r1
     59e:	99 f0       	breq	.+38     	; 0x5c6 <DIO_write_port+0x5a>
     5a0:	18 c0       	rjmp	.+48     	; 0x5d2 <DIO_write_port+0x66>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
     5a2:	8b e3       	ldi	r24, 0x3B	; 59
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	2a 81       	ldd	r18, Y+2	; 0x02
     5a8:	fc 01       	movw	r30, r24
     5aa:	20 83       	st	Z, r18
		break ;
     5ac:	13 c0       	rjmp	.+38     	; 0x5d4 <DIO_write_port+0x68>
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
     5ae:	88 e3       	ldi	r24, 0x38	; 56
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	2a 81       	ldd	r18, Y+2	; 0x02
     5b4:	fc 01       	movw	r30, r24
     5b6:	20 83       	st	Z, r18
		break ;
     5b8:	0d c0       	rjmp	.+26     	; 0x5d4 <DIO_write_port+0x68>
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
     5ba:	85 e3       	ldi	r24, 0x35	; 53
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	2a 81       	ldd	r18, Y+2	; 0x02
     5c0:	fc 01       	movw	r30, r24
     5c2:	20 83       	st	Z, r18
		break ;
     5c4:	07 c0       	rjmp	.+14     	; 0x5d4 <DIO_write_port+0x68>
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
     5c6:	82 e3       	ldi	r24, 0x32	; 50
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	2a 81       	ldd	r18, Y+2	; 0x02
     5cc:	fc 01       	movw	r30, r24
     5ce:	20 83       	st	Z, r18
		break ;
     5d0:	01 c0       	rjmp	.+2      	; 0x5d4 <DIO_write_port+0x68>
		default:
		break ;
     5d2:	00 00       	nop
	}
}
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <DIO_setdir_port>:

void DIO_setdir_port(unsigned char portname,unsigned char direction)
{
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	00 d0       	rcall	.+0      	; 0x5e4 <DIO_setdir_port+0x6>
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
     5e8:	89 83       	std	Y+1, r24	; 0x01
     5ea:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
     5ec:	89 81       	ldd	r24, Y+1	; 0x01
     5ee:	88 2f       	mov	r24, r24
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	82 34       	cpi	r24, 0x42	; 66
     5f4:	91 05       	cpc	r25, r1
     5f6:	a1 f0       	breq	.+40     	; 0x620 <DIO_setdir_port+0x42>
     5f8:	83 34       	cpi	r24, 0x43	; 67
     5fa:	91 05       	cpc	r25, r1
     5fc:	24 f4       	brge	.+8      	; 0x606 <DIO_setdir_port+0x28>
     5fe:	81 34       	cpi	r24, 0x41	; 65
     600:	91 05       	cpc	r25, r1
     602:	41 f0       	breq	.+16     	; 0x614 <DIO_setdir_port+0x36>
     604:	1f c0       	rjmp	.+62     	; 0x644 <DIO_setdir_port+0x66>
     606:	83 34       	cpi	r24, 0x43	; 67
     608:	91 05       	cpc	r25, r1
     60a:	81 f0       	breq	.+32     	; 0x62c <DIO_setdir_port+0x4e>
     60c:	84 34       	cpi	r24, 0x44	; 68
     60e:	91 05       	cpc	r25, r1
     610:	99 f0       	breq	.+38     	; 0x638 <DIO_setdir_port+0x5a>
     612:	18 c0       	rjmp	.+48     	; 0x644 <DIO_setdir_port+0x66>
	{
		case 'A' :
		DDRA=direction;
     614:	8a e3       	ldi	r24, 0x3A	; 58
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	2a 81       	ldd	r18, Y+2	; 0x02
     61a:	fc 01       	movw	r30, r24
     61c:	20 83       	st	Z, r18
		break ;
     61e:	13 c0       	rjmp	.+38     	; 0x646 <DIO_setdir_port+0x68>
		case 'B':
		DDRB=direction;
     620:	87 e3       	ldi	r24, 0x37	; 55
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	2a 81       	ldd	r18, Y+2	; 0x02
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
		break ;
     62a:	0d c0       	rjmp	.+26     	; 0x646 <DIO_setdir_port+0x68>
		case 'C' :
		DDRC=direction;
     62c:	84 e3       	ldi	r24, 0x34	; 52
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	2a 81       	ldd	r18, Y+2	; 0x02
     632:	fc 01       	movw	r30, r24
     634:	20 83       	st	Z, r18
		break ;
     636:	07 c0       	rjmp	.+14     	; 0x646 <DIO_setdir_port+0x68>
		case 'D':
		DDRD=direction;
     638:	81 e3       	ldi	r24, 0x31	; 49
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	2a 81       	ldd	r18, Y+2	; 0x02
     63e:	fc 01       	movw	r30, r24
     640:	20 83       	st	Z, r18
		break ;
     642:	01 c0       	rjmp	.+2      	; 0x646 <DIO_setdir_port+0x68>
		default:
		break ;
     644:	00 00       	nop
	}
	
}
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	08 95       	ret

00000650 <main>:
int TimerOverflow = 0;
char direction;				//Direction received from PC
char speed;

int main(void)
{
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	e0 97       	sbiw	r28, 0x30	; 48
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	f8 94       	cli
     666:	de bf       	out	0x3e, r29	; 62
     668:	0f be       	out	0x3f, r0	; 63
     66a:	cd bf       	out	0x3d, r28	; 61
	UART_vInit(9600);
     66c:	60 e8       	ldi	r22, 0x80	; 128
     66e:	75 e2       	ldi	r23, 0x25	; 37
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <UART_vInit>
	LCD_initialize();
     678:	0e 94 56 08 	call	0x10ac	; 0x10ac <LCD_initialize>
	long count;
	double distance;
	int ton=5000, toff=5000;		//Var to controll speed of motor
     67c:	88 e8       	ldi	r24, 0x88	; 136
     67e:	93 e1       	ldi	r25, 0x13	; 19
     680:	9a 83       	std	Y+2, r25	; 0x02
     682:	89 83       	std	Y+1, r24	; 0x01
     684:	88 e8       	ldi	r24, 0x88	; 136
     686:	93 e1       	ldi	r25, 0x13	; 19
     688:	9c 83       	std	Y+4, r25	; 0x04
     68a:	8b 83       	std	Y+3, r24	; 0x03
	
	DDRA = 0x07;					//Make pin0 of port a trigger of ultrasonic
     68c:	8a e3       	ldi	r24, 0x3A	; 58
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	27 e0       	ldi	r18, 0x07	; 7
     692:	fc 01       	movw	r30, r24
     694:	20 83       	st	Z, r18
	PORTD = 0xFF;					//Turn on pull up
     696:	82 e3       	ldi	r24, 0x32	; 50
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	2f ef       	ldi	r18, 0xFF	; 255
     69c:	fc 01       	movw	r30, r24
     69e:	20 83       	st	Z, r18
	//Controlling of motor
	SET_BIT(DDRA,7);
     6a0:	8a e3       	ldi	r24, 0x3A	; 58
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	2a e3       	ldi	r18, 0x3A	; 58
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	f9 01       	movw	r30, r18
     6aa:	20 81       	ld	r18, Z
     6ac:	20 68       	ori	r18, 0x80	; 128
     6ae:	fc 01       	movw	r30, r24
     6b0:	20 83       	st	Z, r18
	SET_BIT(DDRA,6);
     6b2:	8a e3       	ldi	r24, 0x3A	; 58
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	2a e3       	ldi	r18, 0x3A	; 58
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	f9 01       	movw	r30, r18
     6bc:	20 81       	ld	r18, Z
     6be:	20 64       	ori	r18, 0x40	; 64
     6c0:	fc 01       	movw	r30, r24
     6c2:	20 83       	st	Z, r18
	SET_BIT(DDRA,5);
     6c4:	8a e3       	ldi	r24, 0x3A	; 58
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	2a e3       	ldi	r18, 0x3A	; 58
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	f9 01       	movw	r30, r18
     6ce:	20 81       	ld	r18, Z
     6d0:	20 62       	ori	r18, 0x20	; 32
     6d2:	fc 01       	movw	r30, r24
     6d4:	20 83       	st	Z, r18
	SET_BIT(DDRA,4);
     6d6:	8a e3       	ldi	r24, 0x3A	; 58
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	2a e3       	ldi	r18, 0x3A	; 58
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	f9 01       	movw	r30, r18
     6e0:	20 81       	ld	r18, Z
     6e2:	20 61       	ori	r18, 0x10	; 16
     6e4:	fc 01       	movw	r30, r24
     6e6:	20 83       	st	Z, r18
	
	UCSRB |= (1 << RXCIE);
     6e8:	8a e2       	ldi	r24, 0x2A	; 42
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	2a e2       	ldi	r18, 0x2A	; 42
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	f9 01       	movw	r30, r18
     6f2:	20 81       	ld	r18, Z
     6f4:	20 68       	ori	r18, 0x80	; 128
     6f6:	fc 01       	movw	r30, r24
     6f8:	20 83       	st	Z, r18
	sei();
     6fa:	78 94       	sei
	SET_BIT(TIMSK, TOIE1);			//Enable timer interupt
     6fc:	89 e5       	ldi	r24, 0x59	; 89
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	29 e5       	ldi	r18, 0x59	; 89
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	f9 01       	movw	r30, r18
     706:	20 81       	ld	r18, Z
     708:	24 60       	ori	r18, 0x04	; 4
     70a:	fc 01       	movw	r30, r24
     70c:	20 83       	st	Z, r18
	TCCR1A = 0;						//normal mode
     70e:	8f e4       	ldi	r24, 0x4F	; 79
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	fc 01       	movw	r30, r24
     714:	10 82       	st	Z, r1
	LCD_movecursor(1,1);
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	61 e0       	ldi	r22, 0x01	; 1
     71a:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_movecursor>
	LCD_send_string("Distance: ");
     71e:	80 e6       	ldi	r24, 0x60	; 96
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_send_string>
	LCD_movecursor(2,1);
     726:	82 e0       	ldi	r24, 0x02	; 2
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_movecursor>
	LCD_send_string("Direction: ");
     72e:	8b e6       	ldi	r24, 0x6B	; 107
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_send_string>
     736:	01 c0       	rjmp	.+2      	; 0x73a <main+0xea>
			CLR_BIT(PORTA,7);
			CLR_BIT(PORTA, 5);
			CLR_BIT(PORTA,6);
			CLR_BIT(PORTA, 4);
		}
    }
     738:	00 00       	nop
	LCD_movecursor(2,1);
	LCD_send_string("Direction: ");
    while(1)
	{
		//Recieve direction from bluetooth module
		LCD_movecursor(2,11);
     73a:	82 e0       	ldi	r24, 0x02	; 2
     73c:	6b e0       	ldi	r22, 0x0B	; 11
     73e:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_movecursor>
		LCD_send_char(direction);				//direction recieved by the bluetooth module
     742:	80 91 84 00 	lds	r24, 0x0084
     746:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LCD_send_char>
		LCD_send_char(speed);
     74a:	80 91 85 00 	lds	r24, 0x0085
     74e:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LCD_send_char>
		
        /*Send 10us pulse to trigger*/
		SET_BIT(PORTA,0);
     752:	8b e3       	ldi	r24, 0x3B	; 59
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	2b e3       	ldi	r18, 0x3B	; 59
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	f9 01       	movw	r30, r18
     75c:	20 81       	ld	r18, Z
     75e:	21 60       	ori	r18, 0x01	; 1
     760:	fc 01       	movw	r30, r24
     762:	20 83       	st	Z, r18
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	a0 e2       	ldi	r26, 0x20	; 32
     76a:	b1 e4       	ldi	r27, 0x41	; 65
     76c:	8d 87       	std	Y+13, r24	; 0x0d
     76e:	9e 87       	std	Y+14, r25	; 0x0e
     770:	af 87       	std	Y+15, r26	; 0x0f
     772:	b8 8b       	std	Y+16, r27	; 0x10
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     774:	6d 85       	ldd	r22, Y+13	; 0x0d
     776:	7e 85       	ldd	r23, Y+14	; 0x0e
     778:	8f 85       	ldd	r24, Y+15	; 0x0f
     77a:	98 89       	ldd	r25, Y+16	; 0x10
     77c:	2b ea       	ldi	r18, 0xAB	; 171
     77e:	3a ea       	ldi	r19, 0xAA	; 170
     780:	4a e2       	ldi	r20, 0x2A	; 42
     782:	50 e4       	ldi	r21, 0x40	; 64
     784:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
     788:	dc 01       	movw	r26, r24
     78a:	cb 01       	movw	r24, r22
     78c:	89 8b       	std	Y+17, r24	; 0x11
     78e:	9a 8b       	std	Y+18, r25	; 0x12
     790:	ab 8b       	std	Y+19, r26	; 0x13
     792:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     794:	11 e0       	ldi	r17, 0x01	; 1
     796:	69 89       	ldd	r22, Y+17	; 0x11
     798:	7a 89       	ldd	r23, Y+18	; 0x12
     79a:	8b 89       	ldd	r24, Y+19	; 0x13
     79c:	9c 89       	ldd	r25, Y+20	; 0x14
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	40 e8       	ldi	r20, 0x80	; 128
     7a4:	5f e3       	ldi	r21, 0x3F	; 63
     7a6:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__cmpsf2>
     7aa:	88 23       	and	r24, r24
     7ac:	0c f0       	brlt	.+2      	; 0x7b0 <main+0x160>
     7ae:	10 e0       	ldi	r17, 0x00	; 0
     7b0:	11 23       	and	r17, r17
     7b2:	19 f0       	breq	.+6      	; 0x7ba <main+0x16a>
		__ticks = 1;
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	8d 8b       	std	Y+21, r24	; 0x15
     7b8:	a3 c0       	rjmp	.+326    	; 0x900 <__stack+0xa1>
	else if (__tmp > 255)
     7ba:	11 e0       	ldi	r17, 0x01	; 1
     7bc:	69 89       	ldd	r22, Y+17	; 0x11
     7be:	7a 89       	ldd	r23, Y+18	; 0x12
     7c0:	8b 89       	ldd	r24, Y+19	; 0x13
     7c2:	9c 89       	ldd	r25, Y+20	; 0x14
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	4f e7       	ldi	r20, 0x7F	; 127
     7ca:	53 e4       	ldi	r21, 0x43	; 67
     7cc:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
     7d0:	18 16       	cp	r1, r24
     7d2:	0c f0       	brlt	.+2      	; 0x7d6 <main+0x186>
     7d4:	10 e0       	ldi	r17, 0x00	; 0
     7d6:	11 23       	and	r17, r17
     7d8:	09 f4       	brne	.+2      	; 0x7dc <main+0x18c>
     7da:	89 c0       	rjmp	.+274    	; 0x8ee <__stack+0x8f>
	{
		_delay_ms(__us / 1000.0);
     7dc:	6d 85       	ldd	r22, Y+13	; 0x0d
     7de:	7e 85       	ldd	r23, Y+14	; 0x0e
     7e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     7e2:	98 89       	ldd	r25, Y+16	; 0x10
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	4a e7       	ldi	r20, 0x7A	; 122
     7ea:	54 e4       	ldi	r21, 0x44	; 68
     7ec:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__divsf3>
     7f0:	dc 01       	movw	r26, r24
     7f2:	cb 01       	movw	r24, r22
     7f4:	8e 8b       	std	Y+22, r24	; 0x16
     7f6:	9f 8b       	std	Y+23, r25	; 0x17
     7f8:	a8 8f       	std	Y+24, r26	; 0x18
     7fa:	b9 8f       	std	Y+25, r27	; 0x19
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     7fc:	6e 89       	ldd	r22, Y+22	; 0x16
     7fe:	7f 89       	ldd	r23, Y+23	; 0x17
     800:	88 8d       	ldd	r24, Y+24	; 0x18
     802:	99 8d       	ldd	r25, Y+25	; 0x19
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	4a ef       	ldi	r20, 0xFA	; 250
     80a:	54 e4       	ldi	r21, 0x44	; 68
     80c:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
     810:	dc 01       	movw	r26, r24
     812:	cb 01       	movw	r24, r22
     814:	8a 8f       	std	Y+26, r24	; 0x1a
     816:	9b 8f       	std	Y+27, r25	; 0x1b
     818:	ac 8f       	std	Y+28, r26	; 0x1c
     81a:	bd 8f       	std	Y+29, r27	; 0x1d
	if (__tmp < 1.0)
     81c:	11 e0       	ldi	r17, 0x01	; 1
     81e:	6a 8d       	ldd	r22, Y+26	; 0x1a
     820:	7b 8d       	ldd	r23, Y+27	; 0x1b
     822:	8c 8d       	ldd	r24, Y+28	; 0x1c
     824:	9d 8d       	ldd	r25, Y+29	; 0x1d
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	40 e8       	ldi	r20, 0x80	; 128
     82c:	5f e3       	ldi	r21, 0x3F	; 63
     82e:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__cmpsf2>
     832:	88 23       	and	r24, r24
     834:	0c f0       	brlt	.+2      	; 0x838 <main+0x1e8>
     836:	10 e0       	ldi	r17, 0x00	; 0
     838:	11 23       	and	r17, r17
     83a:	29 f0       	breq	.+10     	; 0x846 <main+0x1f6>
		__ticks = 1;
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	9f 8f       	std	Y+31, r25	; 0x1f
     842:	8e 8f       	std	Y+30, r24	; 0x1e
     844:	46 c0       	rjmp	.+140    	; 0x8d2 <__stack+0x73>
	else if (__tmp > 65535)
     846:	11 e0       	ldi	r17, 0x01	; 1
     848:	6a 8d       	ldd	r22, Y+26	; 0x1a
     84a:	7b 8d       	ldd	r23, Y+27	; 0x1b
     84c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     84e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	3f ef       	ldi	r19, 0xFF	; 255
     854:	4f e7       	ldi	r20, 0x7F	; 127
     856:	57 e4       	ldi	r21, 0x47	; 71
     858:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
     85c:	18 16       	cp	r1, r24
     85e:	0c f0       	brlt	.+2      	; 0x862 <__stack+0x3>
     860:	10 e0       	ldi	r17, 0x00	; 0
     862:	11 23       	and	r17, r17
     864:	61 f1       	breq	.+88     	; 0x8be <__stack+0x5f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     866:	6e 89       	ldd	r22, Y+22	; 0x16
     868:	7f 89       	ldd	r23, Y+23	; 0x17
     86a:	88 8d       	ldd	r24, Y+24	; 0x18
     86c:	99 8d       	ldd	r25, Y+25	; 0x19
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	40 e2       	ldi	r20, 0x20	; 32
     874:	51 e4       	ldi	r21, 0x41	; 65
     876:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
     87a:	dc 01       	movw	r26, r24
     87c:	cb 01       	movw	r24, r22
     87e:	bc 01       	movw	r22, r24
     880:	cd 01       	movw	r24, r26
     882:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
     886:	dc 01       	movw	r26, r24
     888:	cb 01       	movw	r24, r22
     88a:	9f 8f       	std	Y+31, r25	; 0x1f
     88c:	8e 8f       	std	Y+30, r24	; 0x1e
     88e:	12 c0       	rjmp	.+36     	; 0x8b4 <__stack+0x55>
     890:	88 ec       	ldi	r24, 0xC8	; 200
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	99 a3       	lds	r25, 0x59
     896:	88 a3       	lds	r24, 0x58
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     898:	88 a1       	lds	r24, 0x48
     89a:	99 a1       	lds	r25, 0x49
     89c:	8c 01       	movw	r16, r24
     89e:	c8 01       	movw	r24, r16
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <__stack+0x41>
     8a4:	8c 01       	movw	r16, r24
     8a6:	19 a3       	lds	r17, 0x59
     8a8:	08 a3       	lds	r16, 0x58
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     8ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	9f 8f       	std	Y+31, r25	; 0x1f
     8b2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     8b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
     8b8:	00 97       	sbiw	r24, 0x00	; 0
     8ba:	51 f7       	brne	.-44     	; 0x890 <__stack+0x31>
     8bc:	28 c0       	rjmp	.+80     	; 0x90e <__stack+0xaf>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8be:	6a 8d       	ldd	r22, Y+26	; 0x1a
     8c0:	7b 8d       	ldd	r23, Y+27	; 0x1b
     8c2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     8c4:	9d 8d       	ldd	r25, Y+29	; 0x1d
     8c6:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
     8ca:	dc 01       	movw	r26, r24
     8cc:	cb 01       	movw	r24, r22
     8ce:	9f 8f       	std	Y+31, r25	; 0x1f
     8d0:	8e 8f       	std	Y+30, r24	; 0x1e
     8d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     8d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     8d6:	9b a3       	lds	r25, 0x5b
     8d8:	8a a3       	lds	r24, 0x5a
     8da:	8a a1       	lds	r24, 0x4a
     8dc:	9b a1       	lds	r25, 0x4b
     8de:	8c 01       	movw	r16, r24
     8e0:	f8 01       	movw	r30, r16
     8e2:	31 97       	sbiw	r30, 0x01	; 1
     8e4:	f1 f7       	brne	.-4      	; 0x8e2 <__stack+0x83>
     8e6:	8f 01       	movw	r16, r30
     8e8:	1b a3       	lds	r17, 0x5b
     8ea:	0a a3       	lds	r16, 0x5a
     8ec:	10 c0       	rjmp	.+32     	; 0x90e <__stack+0xaf>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     8ee:	69 89       	ldd	r22, Y+17	; 0x11
     8f0:	7a 89       	ldd	r23, Y+18	; 0x12
     8f2:	8b 89       	ldd	r24, Y+19	; 0x13
     8f4:	9c 89       	ldd	r25, Y+20	; 0x14
     8f6:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
     8fa:	dc 01       	movw	r26, r24
     8fc:	cb 01       	movw	r24, r22
     8fe:	8d 8b       	std	Y+21, r24	; 0x15
     900:	8d 89       	ldd	r24, Y+21	; 0x15
     902:	8c a3       	lds	r24, 0x5c
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     904:	8c a1       	lds	r24, 0x4c
     906:	18 2f       	mov	r17, r24
     908:	1a 95       	dec	r17
     90a:	f1 f7       	brne	.-4      	; 0x908 <__stack+0xa9>
     90c:	1c a3       	lds	r17, 0x5c
		_delay_us(10);
		CLR_BIT(PORTA,0);
     90e:	8b e3       	ldi	r24, 0x3B	; 59
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	2b e3       	ldi	r18, 0x3B	; 59
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	f9 01       	movw	r30, r18
     918:	20 81       	ld	r18, Z
     91a:	2e 7f       	andi	r18, 0xFE	; 254
     91c:	fc 01       	movw	r30, r24
     91e:	20 83       	st	Z, r18
		
		TCNT1 = 0;					//Clear timer count
     920:	8c e4       	ldi	r24, 0x4C	; 76
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	fc 01       	movw	r30, r24
     926:	11 82       	std	Z+1, r1	; 0x01
     928:	10 82       	st	Z, r1
		TCCR1B = 0x41;				/* Capture on rising edge, No prescaler*/
     92a:	8e e4       	ldi	r24, 0x4E	; 78
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	21 e4       	ldi	r18, 0x41	; 65
     930:	fc 01       	movw	r30, r24
     932:	20 83       	st	Z, r18
		TIFR = 1<<ICF1;				/* Clear ICP flag (Input Capture flag) */
     934:	88 e5       	ldi	r24, 0x58	; 88
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	20 e2       	ldi	r18, 0x20	; 32
     93a:	fc 01       	movw	r30, r24
     93c:	20 83       	st	Z, r18
		TIFR = 1<<TOV1;				/* Clear Timer Overflow flag */
     93e:	88 e5       	ldi	r24, 0x58	; 88
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	24 e0       	ldi	r18, 0x04	; 4
     944:	fc 01       	movw	r30, r24
     946:	20 83       	st	Z, r18
		
		/*Calculate width of Echo by Input Capture (ICP) */
		
		while ((TIFR & (1 << ICF1)) == 0);/* Wait for rising edge */
     948:	00 00       	nop
     94a:	88 e5       	ldi	r24, 0x58	; 88
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	fc 01       	movw	r30, r24
     950:	80 81       	ld	r24, Z
     952:	88 2f       	mov	r24, r24
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	80 72       	andi	r24, 0x20	; 32
     958:	90 70       	andi	r25, 0x00	; 0
     95a:	00 97       	sbiw	r24, 0x00	; 0
     95c:	b1 f3       	breq	.-20     	; 0x94a <__stack+0xeb>
		TCNT1 = 0;	/* Clear Timer counter */
     95e:	8c e4       	ldi	r24, 0x4C	; 76
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	fc 01       	movw	r30, r24
     964:	11 82       	std	Z+1, r1	; 0x01
     966:	10 82       	st	Z, r1
		TCCR1B = 0x01;	/* Capture on falling edge, No prescaler */
     968:	8e e4       	ldi	r24, 0x4E	; 78
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	21 e0       	ldi	r18, 0x01	; 1
     96e:	fc 01       	movw	r30, r24
     970:	20 83       	st	Z, r18
		TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
     972:	88 e5       	ldi	r24, 0x58	; 88
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	20 e2       	ldi	r18, 0x20	; 32
     978:	fc 01       	movw	r30, r24
     97a:	20 83       	st	Z, r18
		TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
     97c:	88 e5       	ldi	r24, 0x58	; 88
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	24 e0       	ldi	r18, 0x04	; 4
     982:	fc 01       	movw	r30, r24
     984:	20 83       	st	Z, r18
		TimerOverflow = 0;/* Clear Timer overflow count */
     986:	10 92 83 00 	sts	0x0083, r1
     98a:	10 92 82 00 	sts	0x0082, r1
		
		while ((TIFR & (1 << ICF1)) == 0);/* Wait for falling edge */
     98e:	00 00       	nop
     990:	88 e5       	ldi	r24, 0x58	; 88
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	fc 01       	movw	r30, r24
     996:	80 81       	ld	r24, Z
     998:	88 2f       	mov	r24, r24
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	80 72       	andi	r24, 0x20	; 32
     99e:	90 70       	andi	r25, 0x00	; 0
     9a0:	00 97       	sbiw	r24, 0x00	; 0
     9a2:	b1 f3       	breq	.-20     	; 0x990 <__stack+0x131>
		count = ICR1 + (65535 * TimerOverflow);	/* Take count */
     9a4:	86 e4       	ldi	r24, 0x46	; 70
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	fc 01       	movw	r30, r24
     9aa:	80 81       	ld	r24, Z
     9ac:	91 81       	ldd	r25, Z+1	; 0x01
     9ae:	7c 01       	movw	r14, r24
     9b0:	00 e0       	ldi	r16, 0x00	; 0
     9b2:	10 e0       	ldi	r17, 0x00	; 0
     9b4:	80 91 82 00 	lds	r24, 0x0082
     9b8:	90 91 83 00 	lds	r25, 0x0083
     9bc:	aa 27       	eor	r26, r26
     9be:	97 fd       	sbrc	r25, 7
     9c0:	a0 95       	com	r26
     9c2:	ba 2f       	mov	r27, r26
     9c4:	2f ef       	ldi	r18, 0xFF	; 255
     9c6:	3f ef       	ldi	r19, 0xFF	; 255
     9c8:	40 e0       	ldi	r20, 0x00	; 0
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	bc 01       	movw	r22, r24
     9ce:	cd 01       	movw	r24, r26
     9d0:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__mulsi3>
     9d4:	dc 01       	movw	r26, r24
     9d6:	cb 01       	movw	r24, r22
     9d8:	8e 0d       	add	r24, r14
     9da:	9f 1d       	adc	r25, r15
     9dc:	a0 1f       	adc	r26, r16
     9de:	b1 1f       	adc	r27, r17
     9e0:	8d 83       	std	Y+5, r24	; 0x05
     9e2:	9e 83       	std	Y+6, r25	; 0x06
     9e4:	af 83       	std	Y+7, r26	; 0x07
     9e6:	b8 87       	std	Y+8, r27	; 0x08
		/* 8MHz Timer freq, sound speed =343 m/s */
		distance = (double)count / 466.47;
     9e8:	6d 81       	ldd	r22, Y+5	; 0x05
     9ea:	7e 81       	ldd	r23, Y+6	; 0x06
     9ec:	8f 81       	ldd	r24, Y+7	; 0x07
     9ee:	98 85       	ldd	r25, Y+8	; 0x08
     9f0:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__floatsisf>
     9f4:	dc 01       	movw	r26, r24
     9f6:	cb 01       	movw	r24, r22
     9f8:	bc 01       	movw	r22, r24
     9fa:	cd 01       	movw	r24, r26
     9fc:	29 e2       	ldi	r18, 0x29	; 41
     9fe:	3c e3       	ldi	r19, 0x3C	; 60
     a00:	49 ee       	ldi	r20, 0xE9	; 233
     a02:	53 e4       	ldi	r21, 0x43	; 67
     a04:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__divsf3>
     a08:	dc 01       	movw	r26, r24
     a0a:	cb 01       	movw	r24, r22
     a0c:	89 87       	std	Y+9, r24	; 0x09
     a0e:	9a 87       	std	Y+10, r25	; 0x0a
     a10:	ab 87       	std	Y+11, r26	; 0x0b
     a12:	bc 87       	std	Y+12, r27	; 0x0c
		
		/*Send reading to LCD*/
		LCD_movecursor(1,10);
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	6a e0       	ldi	r22, 0x0A	; 10
     a18:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_movecursor>
		if(distance>=100 && distance<1000)
     a1c:	11 e0       	ldi	r17, 0x01	; 1
     a1e:	69 85       	ldd	r22, Y+9	; 0x09
     a20:	7a 85       	ldd	r23, Y+10	; 0x0a
     a22:	8b 85       	ldd	r24, Y+11	; 0x0b
     a24:	9c 85       	ldd	r25, Y+12	; 0x0c
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	48 ec       	ldi	r20, 0xC8	; 200
     a2c:	52 e4       	ldi	r21, 0x42	; 66
     a2e:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
     a32:	88 23       	and	r24, r24
     a34:	0c f4       	brge	.+2      	; 0xa38 <__stack+0x1d9>
     a36:	10 e0       	ldi	r17, 0x00	; 0
     a38:	11 23       	and	r17, r17
     a3a:	09 f4       	brne	.+2      	; 0xa3e <__stack+0x1df>
     a3c:	62 c0       	rjmp	.+196    	; 0xb02 <__stack+0x2a3>
     a3e:	11 e0       	ldi	r17, 0x01	; 1
     a40:	69 85       	ldd	r22, Y+9	; 0x09
     a42:	7a 85       	ldd	r23, Y+10	; 0x0a
     a44:	8b 85       	ldd	r24, Y+11	; 0x0b
     a46:	9c 85       	ldd	r25, Y+12	; 0x0c
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	4a e7       	ldi	r20, 0x7A	; 122
     a4e:	54 e4       	ldi	r21, 0x44	; 68
     a50:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__cmpsf2>
     a54:	88 23       	and	r24, r24
     a56:	0c f0       	brlt	.+2      	; 0xa5a <__stack+0x1fb>
     a58:	10 e0       	ldi	r17, 0x00	; 0
     a5a:	11 23       	and	r17, r17
     a5c:	09 f4       	brne	.+2      	; 0xa60 <__stack+0x201>
     a5e:	51 c0       	rjmp	.+162    	; 0xb02 <__stack+0x2a3>
		{
			LCD_send_char((distance/100)+48);
     a60:	69 85       	ldd	r22, Y+9	; 0x09
     a62:	7a 85       	ldd	r23, Y+10	; 0x0a
     a64:	8b 85       	ldd	r24, Y+11	; 0x0b
     a66:	9c 85       	ldd	r25, Y+12	; 0x0c
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	48 ec       	ldi	r20, 0xC8	; 200
     a6e:	52 e4       	ldi	r21, 0x42	; 66
     a70:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__divsf3>
     a74:	dc 01       	movw	r26, r24
     a76:	cb 01       	movw	r24, r22
     a78:	bc 01       	movw	r22, r24
     a7a:	cd 01       	movw	r24, r26
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	40 e4       	ldi	r20, 0x40	; 64
     a82:	52 e4       	ldi	r21, 0x42	; 66
     a84:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__addsf3>
     a88:	dc 01       	movw	r26, r24
     a8a:	cb 01       	movw	r24, r22
     a8c:	bc 01       	movw	r22, r24
     a8e:	cd 01       	movw	r24, r26
     a90:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
     a94:	dc 01       	movw	r26, r24
     a96:	cb 01       	movw	r24, r22
     a98:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LCD_send_char>
			LCD_send_char(((int)(distance/10)%10)+48);
     a9c:	69 85       	ldd	r22, Y+9	; 0x09
     a9e:	7a 85       	ldd	r23, Y+10	; 0x0a
     aa0:	8b 85       	ldd	r24, Y+11	; 0x0b
     aa2:	9c 85       	ldd	r25, Y+12	; 0x0c
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	40 e2       	ldi	r20, 0x20	; 32
     aaa:	51 e4       	ldi	r21, 0x41	; 65
     aac:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__divsf3>
     ab0:	dc 01       	movw	r26, r24
     ab2:	cb 01       	movw	r24, r22
     ab4:	bc 01       	movw	r22, r24
     ab6:	cd 01       	movw	r24, r26
     ab8:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__fixsfsi>
     abc:	dc 01       	movw	r26, r24
     abe:	cb 01       	movw	r24, r22
     ac0:	2a e0       	ldi	r18, 0x0A	; 10
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	b9 01       	movw	r22, r18
     ac6:	0e 94 15 11 	call	0x222a	; 0x222a <__divmodhi4>
     aca:	80 5d       	subi	r24, 0xD0	; 208
     acc:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LCD_send_char>
			LCD_send_char(((int)distance%10)+48);
     ad0:	69 85       	ldd	r22, Y+9	; 0x09
     ad2:	7a 85       	ldd	r23, Y+10	; 0x0a
     ad4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ad6:	9c 85       	ldd	r25, Y+12	; 0x0c
     ad8:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__fixsfsi>
     adc:	dc 01       	movw	r26, r24
     ade:	cb 01       	movw	r24, r22
     ae0:	2a e0       	ldi	r18, 0x0A	; 10
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	b9 01       	movw	r22, r18
     ae6:	0e 94 15 11 	call	0x222a	; 0x222a <__divmodhi4>
     aea:	80 5d       	subi	r24, 0xD0	; 208
     aec:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LCD_send_char>
			LCD_movecursor(1,13);
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	6d e0       	ldi	r22, 0x0D	; 13
     af4:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_movecursor>
			LCD_send_string("CM");
     af8:	87 e7       	ldi	r24, 0x77	; 119
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_send_string>
     b00:	8c c0       	rjmp	.+280    	; 0xc1a <__stack+0x3bb>
		}
		else if (distance>=10 && distance<100)
     b02:	11 e0       	ldi	r17, 0x01	; 1
     b04:	69 85       	ldd	r22, Y+9	; 0x09
     b06:	7a 85       	ldd	r23, Y+10	; 0x0a
     b08:	8b 85       	ldd	r24, Y+11	; 0x0b
     b0a:	9c 85       	ldd	r25, Y+12	; 0x0c
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	40 e2       	ldi	r20, 0x20	; 32
     b12:	51 e4       	ldi	r21, 0x41	; 65
     b14:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
     b18:	88 23       	and	r24, r24
     b1a:	0c f4       	brge	.+2      	; 0xb1e <__stack+0x2bf>
     b1c:	10 e0       	ldi	r17, 0x00	; 0
     b1e:	11 23       	and	r17, r17
     b20:	09 f4       	brne	.+2      	; 0xb24 <__stack+0x2c5>
     b22:	4b c0       	rjmp	.+150    	; 0xbba <__stack+0x35b>
     b24:	11 e0       	ldi	r17, 0x01	; 1
     b26:	69 85       	ldd	r22, Y+9	; 0x09
     b28:	7a 85       	ldd	r23, Y+10	; 0x0a
     b2a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b2c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	48 ec       	ldi	r20, 0xC8	; 200
     b34:	52 e4       	ldi	r21, 0x42	; 66
     b36:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__cmpsf2>
     b3a:	88 23       	and	r24, r24
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__stack+0x2e1>
     b3e:	10 e0       	ldi	r17, 0x00	; 0
     b40:	11 23       	and	r17, r17
     b42:	d9 f1       	breq	.+118    	; 0xbba <__stack+0x35b>
		{
			//LCD_send_string("0");
			LCD_send_char((distance/10)+48);
     b44:	69 85       	ldd	r22, Y+9	; 0x09
     b46:	7a 85       	ldd	r23, Y+10	; 0x0a
     b48:	8b 85       	ldd	r24, Y+11	; 0x0b
     b4a:	9c 85       	ldd	r25, Y+12	; 0x0c
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	40 e2       	ldi	r20, 0x20	; 32
     b52:	51 e4       	ldi	r21, 0x41	; 65
     b54:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__divsf3>
     b58:	dc 01       	movw	r26, r24
     b5a:	cb 01       	movw	r24, r22
     b5c:	bc 01       	movw	r22, r24
     b5e:	cd 01       	movw	r24, r26
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	40 e4       	ldi	r20, 0x40	; 64
     b66:	52 e4       	ldi	r21, 0x42	; 66
     b68:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__addsf3>
     b6c:	dc 01       	movw	r26, r24
     b6e:	cb 01       	movw	r24, r22
     b70:	bc 01       	movw	r22, r24
     b72:	cd 01       	movw	r24, r26
     b74:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
     b78:	dc 01       	movw	r26, r24
     b7a:	cb 01       	movw	r24, r22
     b7c:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LCD_send_char>
			LCD_send_char(((int)distance%10)+48);
     b80:	69 85       	ldd	r22, Y+9	; 0x09
     b82:	7a 85       	ldd	r23, Y+10	; 0x0a
     b84:	8b 85       	ldd	r24, Y+11	; 0x0b
     b86:	9c 85       	ldd	r25, Y+12	; 0x0c
     b88:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__fixsfsi>
     b8c:	dc 01       	movw	r26, r24
     b8e:	cb 01       	movw	r24, r22
     b90:	2a e0       	ldi	r18, 0x0A	; 10
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	b9 01       	movw	r22, r18
     b96:	0e 94 15 11 	call	0x222a	; 0x222a <__divmodhi4>
     b9a:	80 5d       	subi	r24, 0xD0	; 208
     b9c:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LCD_send_char>
			LCD_movecursor(1,12);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	6c e0       	ldi	r22, 0x0C	; 12
     ba4:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_movecursor>
			LCD_send_string("CM");
     ba8:	87 e7       	ldi	r24, 0x77	; 119
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_send_string>
			LCD_send_string("  ");
     bb0:	8a e7       	ldi	r24, 0x7A	; 122
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_send_string>
     bb8:	30 c0       	rjmp	.+96     	; 0xc1a <__stack+0x3bb>
		}
		else if(distance<10)
     bba:	11 e0       	ldi	r17, 0x01	; 1
     bbc:	69 85       	ldd	r22, Y+9	; 0x09
     bbe:	7a 85       	ldd	r23, Y+10	; 0x0a
     bc0:	8b 85       	ldd	r24, Y+11	; 0x0b
     bc2:	9c 85       	ldd	r25, Y+12	; 0x0c
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e2       	ldi	r20, 0x20	; 32
     bca:	51 e4       	ldi	r21, 0x41	; 65
     bcc:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__cmpsf2>
     bd0:	88 23       	and	r24, r24
     bd2:	0c f0       	brlt	.+2      	; 0xbd6 <__stack+0x377>
     bd4:	10 e0       	ldi	r17, 0x00	; 0
     bd6:	11 23       	and	r17, r17
     bd8:	01 f1       	breq	.+64     	; 0xc1a <__stack+0x3bb>
		{
			//LCD_send_string("00");
			LCD_send_char(distance+48);
     bda:	69 85       	ldd	r22, Y+9	; 0x09
     bdc:	7a 85       	ldd	r23, Y+10	; 0x0a
     bde:	8b 85       	ldd	r24, Y+11	; 0x0b
     be0:	9c 85       	ldd	r25, Y+12	; 0x0c
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 e4       	ldi	r20, 0x40	; 64
     be8:	52 e4       	ldi	r21, 0x42	; 66
     bea:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__addsf3>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	bc 01       	movw	r22, r24
     bf4:	cd 01       	movw	r24, r26
     bf6:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
     bfa:	dc 01       	movw	r26, r24
     bfc:	cb 01       	movw	r24, r22
     bfe:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LCD_send_char>
			LCD_movecursor(1,11);
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	6b e0       	ldi	r22, 0x0B	; 11
     c06:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <LCD_movecursor>
			LCD_send_string("CM");
     c0a:	87 e7       	ldi	r24, 0x77	; 119
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_send_string>
			LCD_send_string("   ");
     c12:	8d e7       	ldi	r24, 0x7D	; 125
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_send_string>
		
		
		//Motor controls
		
		//Speed control function
		switch (speed)
     c1a:	80 91 85 00 	lds	r24, 0x0085
     c1e:	88 2f       	mov	r24, r24
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	85 33       	cpi	r24, 0x35	; 53
     c24:	91 05       	cpc	r25, r1
     c26:	09 f4       	brne	.+2      	; 0xc2a <__stack+0x3cb>
     c28:	48 c0       	rjmp	.+144    	; 0xcba <__stack+0x45b>
     c2a:	86 33       	cpi	r24, 0x36	; 54
     c2c:	91 05       	cpc	r25, r1
     c2e:	8c f4       	brge	.+34     	; 0xc52 <__stack+0x3f3>
     c30:	81 33       	cpi	r24, 0x31	; 49
     c32:	91 05       	cpc	r25, r1
     c34:	39 f1       	breq	.+78     	; 0xc84 <__stack+0x425>
     c36:	82 33       	cpi	r24, 0x32	; 50
     c38:	91 05       	cpc	r25, r1
     c3a:	24 f4       	brge	.+8      	; 0xc44 <__stack+0x3e5>
     c3c:	80 33       	cpi	r24, 0x30	; 48
     c3e:	91 05       	cpc	r25, r1
     c40:	c1 f0       	breq	.+48     	; 0xc72 <__stack+0x413>
     c42:	68 c0       	rjmp	.+208    	; 0xd14 <__stack+0x4b5>
     c44:	82 33       	cpi	r24, 0x32	; 50
     c46:	91 05       	cpc	r25, r1
     c48:	31 f1       	breq	.+76     	; 0xc96 <__stack+0x437>
     c4a:	84 33       	cpi	r24, 0x34	; 52
     c4c:	91 05       	cpc	r25, r1
     c4e:	61 f1       	breq	.+88     	; 0xca8 <__stack+0x449>
     c50:	61 c0       	rjmp	.+194    	; 0xd14 <__stack+0x4b5>
     c52:	87 33       	cpi	r24, 0x37	; 55
     c54:	91 05       	cpc	r25, r1
     c56:	09 f4       	brne	.+2      	; 0xc5a <__stack+0x3fb>
     c58:	42 c0       	rjmp	.+132    	; 0xcde <__stack+0x47f>
     c5a:	87 33       	cpi	r24, 0x37	; 55
     c5c:	91 05       	cpc	r25, r1
     c5e:	b4 f1       	brlt	.+108    	; 0xccc <__stack+0x46d>
     c60:	88 33       	cpi	r24, 0x38	; 56
     c62:	91 05       	cpc	r25, r1
     c64:	09 f4       	brne	.+2      	; 0xc68 <__stack+0x409>
     c66:	44 c0       	rjmp	.+136    	; 0xcf0 <__stack+0x491>
     c68:	89 33       	cpi	r24, 0x39	; 57
     c6a:	91 05       	cpc	r25, r1
     c6c:	09 f4       	brne	.+2      	; 0xc70 <__stack+0x411>
     c6e:	49 c0       	rjmp	.+146    	; 0xd02 <__stack+0x4a3>
     c70:	51 c0       	rjmp	.+162    	; 0xd14 <__stack+0x4b5>
		{
		case '0':
			ton=9000;
     c72:	88 e2       	ldi	r24, 0x28	; 40
     c74:	93 e2       	ldi	r25, 0x23	; 35
     c76:	9a 83       	std	Y+2, r25	; 0x02
     c78:	89 83       	std	Y+1, r24	; 0x01
			toff=1000;
     c7a:	88 ee       	ldi	r24, 0xE8	; 232
     c7c:	93 e0       	ldi	r25, 0x03	; 3
     c7e:	9c 83       	std	Y+4, r25	; 0x04
     c80:	8b 83       	std	Y+3, r24	; 0x03
			break;
     c82:	48 c0       	rjmp	.+144    	; 0xd14 <__stack+0x4b5>
		case '1':
			ton=5500;
     c84:	8c e7       	ldi	r24, 0x7C	; 124
     c86:	95 e1       	ldi	r25, 0x15	; 21
     c88:	9a 83       	std	Y+2, r25	; 0x02
     c8a:	89 83       	std	Y+1, r24	; 0x01
			toff=4500;
     c8c:	84 e9       	ldi	r24, 0x94	; 148
     c8e:	91 e1       	ldi	r25, 0x11	; 17
     c90:	9c 83       	std	Y+4, r25	; 0x04
     c92:	8b 83       	std	Y+3, r24	; 0x03
			break;
     c94:	3f c0       	rjmp	.+126    	; 0xd14 <__stack+0x4b5>
		case '2':
			ton=6000;
     c96:	80 e7       	ldi	r24, 0x70	; 112
     c98:	97 e1       	ldi	r25, 0x17	; 23
     c9a:	9a 83       	std	Y+2, r25	; 0x02
     c9c:	89 83       	std	Y+1, r24	; 0x01
			toff=4000;
     c9e:	80 ea       	ldi	r24, 0xA0	; 160
     ca0:	9f e0       	ldi	r25, 0x0F	; 15
     ca2:	9c 83       	std	Y+4, r25	; 0x04
     ca4:	8b 83       	std	Y+3, r24	; 0x03
			break;
     ca6:	36 c0       	rjmp	.+108    	; 0xd14 <__stack+0x4b5>
		case '4':
			ton=6500;
     ca8:	84 e6       	ldi	r24, 0x64	; 100
     caa:	99 e1       	ldi	r25, 0x19	; 25
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	89 83       	std	Y+1, r24	; 0x01
			toff=3500;
     cb0:	8c ea       	ldi	r24, 0xAC	; 172
     cb2:	9d e0       	ldi	r25, 0x0D	; 13
     cb4:	9c 83       	std	Y+4, r25	; 0x04
     cb6:	8b 83       	std	Y+3, r24	; 0x03
			break;
     cb8:	2d c0       	rjmp	.+90     	; 0xd14 <__stack+0x4b5>
		case '5':
			ton=7000;
     cba:	88 e5       	ldi	r24, 0x58	; 88
     cbc:	9b e1       	ldi	r25, 0x1B	; 27
     cbe:	9a 83       	std	Y+2, r25	; 0x02
     cc0:	89 83       	std	Y+1, r24	; 0x01
			toff=3000;
     cc2:	88 eb       	ldi	r24, 0xB8	; 184
     cc4:	9b e0       	ldi	r25, 0x0B	; 11
     cc6:	9c 83       	std	Y+4, r25	; 0x04
     cc8:	8b 83       	std	Y+3, r24	; 0x03
			break;
     cca:	24 c0       	rjmp	.+72     	; 0xd14 <__stack+0x4b5>
		case '6':
			ton=7500;
     ccc:	8c e4       	ldi	r24, 0x4C	; 76
     cce:	9d e1       	ldi	r25, 0x1D	; 29
     cd0:	9a 83       	std	Y+2, r25	; 0x02
     cd2:	89 83       	std	Y+1, r24	; 0x01
			toff=2500;
     cd4:	84 ec       	ldi	r24, 0xC4	; 196
     cd6:	99 e0       	ldi	r25, 0x09	; 9
     cd8:	9c 83       	std	Y+4, r25	; 0x04
     cda:	8b 83       	std	Y+3, r24	; 0x03
			break;
     cdc:	1b c0       	rjmp	.+54     	; 0xd14 <__stack+0x4b5>
		case '7':
			ton=8000;
     cde:	80 e4       	ldi	r24, 0x40	; 64
     ce0:	9f e1       	ldi	r25, 0x1F	; 31
     ce2:	9a 83       	std	Y+2, r25	; 0x02
     ce4:	89 83       	std	Y+1, r24	; 0x01
			toff=2000;
     ce6:	80 ed       	ldi	r24, 0xD0	; 208
     ce8:	97 e0       	ldi	r25, 0x07	; 7
     cea:	9c 83       	std	Y+4, r25	; 0x04
     cec:	8b 83       	std	Y+3, r24	; 0x03
			break;
     cee:	12 c0       	rjmp	.+36     	; 0xd14 <__stack+0x4b5>
		case '8':
			ton=8500;
     cf0:	84 e3       	ldi	r24, 0x34	; 52
     cf2:	91 e2       	ldi	r25, 0x21	; 33
     cf4:	9a 83       	std	Y+2, r25	; 0x02
     cf6:	89 83       	std	Y+1, r24	; 0x01
			toff=1500;
     cf8:	8c ed       	ldi	r24, 0xDC	; 220
     cfa:	95 e0       	ldi	r25, 0x05	; 5
     cfc:	9c 83       	std	Y+4, r25	; 0x04
     cfe:	8b 83       	std	Y+3, r24	; 0x03
			break;
     d00:	09 c0       	rjmp	.+18     	; 0xd14 <__stack+0x4b5>
		case '9':
			ton=9000;
     d02:	88 e2       	ldi	r24, 0x28	; 40
     d04:	93 e2       	ldi	r25, 0x23	; 35
     d06:	9a 83       	std	Y+2, r25	; 0x02
     d08:	89 83       	std	Y+1, r24	; 0x01
			toff=1000;
     d0a:	88 ee       	ldi	r24, 0xE8	; 232
     d0c:	93 e0       	ldi	r25, 0x03	; 3
     d0e:	9c 83       	std	Y+4, r25	; 0x04
     d10:	8b 83       	std	Y+3, r24	; 0x03
			break;
     d12:	00 00       	nop
		}
		
		//Move forward function
		if (direction=='F')
     d14:	80 91 84 00 	lds	r24, 0x0084
     d18:	86 34       	cpi	r24, 0x46	; 70
     d1a:	29 f5       	brne	.+74     	; 0xd66 <__stack+0x507>
		{
			SET_BIT(PORTA,7);
     d1c:	8b e3       	ldi	r24, 0x3B	; 59
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	2b e3       	ldi	r18, 0x3B	; 59
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	f9 01       	movw	r30, r18
     d26:	20 81       	ld	r18, Z
     d28:	20 68       	ori	r18, 0x80	; 128
     d2a:	fc 01       	movw	r30, r24
     d2c:	20 83       	st	Z, r18
			CLR_BIT(PORTA,6);
     d2e:	8b e3       	ldi	r24, 0x3B	; 59
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	2b e3       	ldi	r18, 0x3B	; 59
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	f9 01       	movw	r30, r18
     d38:	20 81       	ld	r18, Z
     d3a:	2f 7b       	andi	r18, 0xBF	; 191
     d3c:	fc 01       	movw	r30, r24
     d3e:	20 83       	st	Z, r18
			SET_BIT(PORTA, 5);
     d40:	8b e3       	ldi	r24, 0x3B	; 59
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	2b e3       	ldi	r18, 0x3B	; 59
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	f9 01       	movw	r30, r18
     d4a:	20 81       	ld	r18, Z
     d4c:	20 62       	ori	r18, 0x20	; 32
     d4e:	fc 01       	movw	r30, r24
     d50:	20 83       	st	Z, r18
			CLR_BIT(PORTA, 4);
     d52:	8b e3       	ldi	r24, 0x3B	; 59
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	2b e3       	ldi	r18, 0x3B	; 59
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	f9 01       	movw	r30, r18
     d5c:	20 81       	ld	r18, Z
     d5e:	2f 7e       	andi	r18, 0xEF	; 239
     d60:	fc 01       	movw	r30, r24
     d62:	20 83       	st	Z, r18
			CLR_BIT(PORTA,7);
			CLR_BIT(PORTA, 5);
			CLR_BIT(PORTA,6);
			CLR_BIT(PORTA, 4);
		}
    }
     d64:	e9 cc       	rjmp	.-1582   	; 0x738 <main+0xe8>
			CLR_BIT(PORTA, 5);
			SET_BIT(PORTA, 4);*/
			//_delay_loop_2(toff);
		}
		
		else if (direction=='B')
     d66:	80 91 84 00 	lds	r24, 0x0084
     d6a:	82 34       	cpi	r24, 0x42	; 66
     d6c:	09 f0       	breq	.+2      	; 0xd70 <__stack+0x511>
     d6e:	63 c0       	rjmp	.+198    	; 0xe36 <__stack+0x5d7>
		{
			CLR_BIT(PORTA,7);
     d70:	8b e3       	ldi	r24, 0x3B	; 59
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	2b e3       	ldi	r18, 0x3B	; 59
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	f9 01       	movw	r30, r18
     d7a:	20 81       	ld	r18, Z
     d7c:	2f 77       	andi	r18, 0x7F	; 127
     d7e:	fc 01       	movw	r30, r24
     d80:	20 83       	st	Z, r18
			CLR_BIT(PORTA, 5);
     d82:	8b e3       	ldi	r24, 0x3B	; 59
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	2b e3       	ldi	r18, 0x3B	; 59
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	f9 01       	movw	r30, r18
     d8c:	20 81       	ld	r18, Z
     d8e:	2f 7d       	andi	r18, 0xDF	; 223
     d90:	fc 01       	movw	r30, r24
     d92:	20 83       	st	Z, r18
			SET_BIT(PORTA,6);
     d94:	8b e3       	ldi	r24, 0x3B	; 59
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	2b e3       	ldi	r18, 0x3B	; 59
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	f9 01       	movw	r30, r18
     d9e:	20 81       	ld	r18, Z
     da0:	20 64       	ori	r18, 0x40	; 64
     da2:	fc 01       	movw	r30, r24
     da4:	20 83       	st	Z, r18
			SET_BIT(PORTA, 4);
     da6:	8b e3       	ldi	r24, 0x3B	; 59
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	2b e3       	ldi	r18, 0x3B	; 59
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	f9 01       	movw	r30, r18
     db0:	20 81       	ld	r18, Z
     db2:	20 61       	ori	r18, 0x10	; 16
     db4:	fc 01       	movw	r30, r24
     db6:	20 83       	st	Z, r18
			_delay_loop_2(ton);
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	9a 81       	ldd	r25, Y+2	; 0x02
     dbc:	9e a3       	lds	r25, 0x5e
     dbe:	8d a3       	lds	r24, 0x5d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dc0:	8d a1       	lds	r24, 0x4d
     dc2:	9e a1       	lds	r25, 0x4e
     dc4:	8c 01       	movw	r16, r24
     dc6:	c8 01       	movw	r24, r16
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	f1 f7       	brne	.-4      	; 0xdc8 <__stack+0x569>
     dcc:	8c 01       	movw	r16, r24
     dce:	1e a3       	lds	r17, 0x5e
     dd0:	0d a3       	lds	r16, 0x5d
			SET_BIT(PORTA,7);
     dd2:	8b e3       	ldi	r24, 0x3B	; 59
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	2b e3       	ldi	r18, 0x3B	; 59
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	f9 01       	movw	r30, r18
     ddc:	20 81       	ld	r18, Z
     dde:	20 68       	ori	r18, 0x80	; 128
     de0:	fc 01       	movw	r30, r24
     de2:	20 83       	st	Z, r18
			SET_BIT(PORTA, 5);
     de4:	8b e3       	ldi	r24, 0x3B	; 59
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	2b e3       	ldi	r18, 0x3B	; 59
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	f9 01       	movw	r30, r18
     dee:	20 81       	ld	r18, Z
     df0:	20 62       	ori	r18, 0x20	; 32
     df2:	fc 01       	movw	r30, r24
     df4:	20 83       	st	Z, r18
			CLR_BIT(PORTA,6);
     df6:	8b e3       	ldi	r24, 0x3B	; 59
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	2b e3       	ldi	r18, 0x3B	; 59
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	f9 01       	movw	r30, r18
     e00:	20 81       	ld	r18, Z
     e02:	2f 7b       	andi	r18, 0xBF	; 191
     e04:	fc 01       	movw	r30, r24
     e06:	20 83       	st	Z, r18
			CLR_BIT(PORTA, 4);
     e08:	8b e3       	ldi	r24, 0x3B	; 59
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	2b e3       	ldi	r18, 0x3B	; 59
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	f9 01       	movw	r30, r18
     e12:	20 81       	ld	r18, Z
     e14:	2f 7e       	andi	r18, 0xEF	; 239
     e16:	fc 01       	movw	r30, r24
     e18:	20 83       	st	Z, r18
			_delay_loop_2(toff);
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	9c 81       	ldd	r25, Y+4	; 0x04
     e1e:	98 a7       	lds	r25, 0x78
     e20:	8f a3       	lds	r24, 0x5f
     e22:	8f a1       	lds	r24, 0x4f
     e24:	98 a5       	lds	r25, 0x68
     e26:	8c 01       	movw	r16, r24
     e28:	c8 01       	movw	r24, r16
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <__stack+0x5cb>
     e2e:	8c 01       	movw	r16, r24
     e30:	18 a7       	lds	r17, 0x78
     e32:	0f a3       	lds	r16, 0x5f
			CLR_BIT(PORTA,7);
			CLR_BIT(PORTA, 5);
			CLR_BIT(PORTA,6);
			CLR_BIT(PORTA, 4);
		}
    }
     e34:	81 cc       	rjmp	.-1790   	; 0x738 <main+0xe8>
			CLR_BIT(PORTA,6);
			CLR_BIT(PORTA, 4);
			_delay_loop_2(toff);
		}
		//Adjust it
		else if (direction=='R')
     e36:	80 91 84 00 	lds	r24, 0x0084
     e3a:	82 35       	cpi	r24, 0x52	; 82
     e3c:	09 f0       	breq	.+2      	; 0xe40 <__stack+0x5e1>
     e3e:	63 c0       	rjmp	.+198    	; 0xf06 <__stack+0x6a7>
		{
			CLR_BIT(PORTA,7);
     e40:	8b e3       	ldi	r24, 0x3B	; 59
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	2b e3       	ldi	r18, 0x3B	; 59
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	f9 01       	movw	r30, r18
     e4a:	20 81       	ld	r18, Z
     e4c:	2f 77       	andi	r18, 0x7F	; 127
     e4e:	fc 01       	movw	r30, r24
     e50:	20 83       	st	Z, r18
			CLR_BIT(PORTA, 5);
     e52:	8b e3       	ldi	r24, 0x3B	; 59
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	2b e3       	ldi	r18, 0x3B	; 59
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	f9 01       	movw	r30, r18
     e5c:	20 81       	ld	r18, Z
     e5e:	2f 7d       	andi	r18, 0xDF	; 223
     e60:	fc 01       	movw	r30, r24
     e62:	20 83       	st	Z, r18
			SET_BIT(PORTA,6);
     e64:	8b e3       	ldi	r24, 0x3B	; 59
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	2b e3       	ldi	r18, 0x3B	; 59
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	f9 01       	movw	r30, r18
     e6e:	20 81       	ld	r18, Z
     e70:	20 64       	ori	r18, 0x40	; 64
     e72:	fc 01       	movw	r30, r24
     e74:	20 83       	st	Z, r18
			SET_BIT(PORTA, 4);
     e76:	8b e3       	ldi	r24, 0x3B	; 59
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	2b e3       	ldi	r18, 0x3B	; 59
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	f9 01       	movw	r30, r18
     e80:	20 81       	ld	r18, Z
     e82:	20 61       	ori	r18, 0x10	; 16
     e84:	fc 01       	movw	r30, r24
     e86:	20 83       	st	Z, r18
			_delay_loop_2(ton);
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	9a 81       	ldd	r25, Y+2	; 0x02
     e8c:	9a a7       	lds	r25, 0x7a
     e8e:	89 a7       	lds	r24, 0x79
     e90:	89 a5       	lds	r24, 0x69
     e92:	9a a5       	lds	r25, 0x6a
     e94:	8c 01       	movw	r16, r24
     e96:	c8 01       	movw	r24, r16
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	f1 f7       	brne	.-4      	; 0xe98 <__stack+0x639>
     e9c:	8c 01       	movw	r16, r24
     e9e:	1a a7       	lds	r17, 0x7a
     ea0:	09 a7       	lds	r16, 0x79
			SET_BIT(PORTA,7);
     ea2:	8b e3       	ldi	r24, 0x3B	; 59
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	2b e3       	ldi	r18, 0x3B	; 59
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	f9 01       	movw	r30, r18
     eac:	20 81       	ld	r18, Z
     eae:	20 68       	ori	r18, 0x80	; 128
     eb0:	fc 01       	movw	r30, r24
     eb2:	20 83       	st	Z, r18
			SET_BIT(PORTA, 5);
     eb4:	8b e3       	ldi	r24, 0x3B	; 59
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	2b e3       	ldi	r18, 0x3B	; 59
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	f9 01       	movw	r30, r18
     ebe:	20 81       	ld	r18, Z
     ec0:	20 62       	ori	r18, 0x20	; 32
     ec2:	fc 01       	movw	r30, r24
     ec4:	20 83       	st	Z, r18
			CLR_BIT(PORTA,6);
     ec6:	8b e3       	ldi	r24, 0x3B	; 59
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	2b e3       	ldi	r18, 0x3B	; 59
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	f9 01       	movw	r30, r18
     ed0:	20 81       	ld	r18, Z
     ed2:	2f 7b       	andi	r18, 0xBF	; 191
     ed4:	fc 01       	movw	r30, r24
     ed6:	20 83       	st	Z, r18
			CLR_BIT(PORTA, 4);
     ed8:	8b e3       	ldi	r24, 0x3B	; 59
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	2b e3       	ldi	r18, 0x3B	; 59
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	f9 01       	movw	r30, r18
     ee2:	20 81       	ld	r18, Z
     ee4:	2f 7e       	andi	r18, 0xEF	; 239
     ee6:	fc 01       	movw	r30, r24
     ee8:	20 83       	st	Z, r18
			_delay_loop_2(toff);
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	9c 81       	ldd	r25, Y+4	; 0x04
     eee:	9c a7       	lds	r25, 0x7c
     ef0:	8b a7       	lds	r24, 0x7b
     ef2:	8b a5       	lds	r24, 0x6b
     ef4:	9c a5       	lds	r25, 0x6c
     ef6:	8c 01       	movw	r16, r24
     ef8:	c8 01       	movw	r24, r16
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	f1 f7       	brne	.-4      	; 0xefa <__stack+0x69b>
     efe:	8c 01       	movw	r16, r24
     f00:	1c a7       	lds	r17, 0x7c
     f02:	0b a7       	lds	r16, 0x7b
			CLR_BIT(PORTA,7);
			CLR_BIT(PORTA, 5);
			CLR_BIT(PORTA,6);
			CLR_BIT(PORTA, 4);
		}
    }
     f04:	19 cc       	rjmp	.-1998   	; 0x738 <main+0xe8>
			CLR_BIT(PORTA,6);
			CLR_BIT(PORTA, 4);
			_delay_loop_2(toff);
		}
		//Adjust it
		else if (direction=='L')
     f06:	80 91 84 00 	lds	r24, 0x0084
     f0a:	8c 34       	cpi	r24, 0x4C	; 76
     f0c:	09 f0       	breq	.+2      	; 0xf10 <__stack+0x6b1>
     f0e:	63 c0       	rjmp	.+198    	; 0xfd6 <__stack+0x777>
		{
			CLR_BIT(PORTA,7);
     f10:	8b e3       	ldi	r24, 0x3B	; 59
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	2b e3       	ldi	r18, 0x3B	; 59
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	f9 01       	movw	r30, r18
     f1a:	20 81       	ld	r18, Z
     f1c:	2f 77       	andi	r18, 0x7F	; 127
     f1e:	fc 01       	movw	r30, r24
     f20:	20 83       	st	Z, r18
			CLR_BIT(PORTA, 5);
     f22:	8b e3       	ldi	r24, 0x3B	; 59
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	2b e3       	ldi	r18, 0x3B	; 59
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	f9 01       	movw	r30, r18
     f2c:	20 81       	ld	r18, Z
     f2e:	2f 7d       	andi	r18, 0xDF	; 223
     f30:	fc 01       	movw	r30, r24
     f32:	20 83       	st	Z, r18
			SET_BIT(PORTA,6);
     f34:	8b e3       	ldi	r24, 0x3B	; 59
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	2b e3       	ldi	r18, 0x3B	; 59
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	f9 01       	movw	r30, r18
     f3e:	20 81       	ld	r18, Z
     f40:	20 64       	ori	r18, 0x40	; 64
     f42:	fc 01       	movw	r30, r24
     f44:	20 83       	st	Z, r18
			SET_BIT(PORTA, 4);
     f46:	8b e3       	ldi	r24, 0x3B	; 59
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	2b e3       	ldi	r18, 0x3B	; 59
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	f9 01       	movw	r30, r18
     f50:	20 81       	ld	r18, Z
     f52:	20 61       	ori	r18, 0x10	; 16
     f54:	fc 01       	movw	r30, r24
     f56:	20 83       	st	Z, r18
			_delay_loop_2(ton);
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	9a 81       	ldd	r25, Y+2	; 0x02
     f5c:	9e a7       	lds	r25, 0x7e
     f5e:	8d a7       	lds	r24, 0x7d
     f60:	8d a5       	lds	r24, 0x6d
     f62:	9e a5       	lds	r25, 0x6e
     f64:	8c 01       	movw	r16, r24
     f66:	c8 01       	movw	r24, r16
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <__stack+0x709>
     f6c:	8c 01       	movw	r16, r24
     f6e:	1e a7       	lds	r17, 0x7e
     f70:	0d a7       	lds	r16, 0x7d
			SET_BIT(PORTA,7);
     f72:	8b e3       	ldi	r24, 0x3B	; 59
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	2b e3       	ldi	r18, 0x3B	; 59
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	f9 01       	movw	r30, r18
     f7c:	20 81       	ld	r18, Z
     f7e:	20 68       	ori	r18, 0x80	; 128
     f80:	fc 01       	movw	r30, r24
     f82:	20 83       	st	Z, r18
			SET_BIT(PORTA, 5);
     f84:	8b e3       	ldi	r24, 0x3B	; 59
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	2b e3       	ldi	r18, 0x3B	; 59
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	f9 01       	movw	r30, r18
     f8e:	20 81       	ld	r18, Z
     f90:	20 62       	ori	r18, 0x20	; 32
     f92:	fc 01       	movw	r30, r24
     f94:	20 83       	st	Z, r18
			CLR_BIT(PORTA,6);
     f96:	8b e3       	ldi	r24, 0x3B	; 59
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	2b e3       	ldi	r18, 0x3B	; 59
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	f9 01       	movw	r30, r18
     fa0:	20 81       	ld	r18, Z
     fa2:	2f 7b       	andi	r18, 0xBF	; 191
     fa4:	fc 01       	movw	r30, r24
     fa6:	20 83       	st	Z, r18
			CLR_BIT(PORTA, 4);
     fa8:	8b e3       	ldi	r24, 0x3B	; 59
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	2b e3       	ldi	r18, 0x3B	; 59
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	f9 01       	movw	r30, r18
     fb2:	20 81       	ld	r18, Z
     fb4:	2f 7e       	andi	r18, 0xEF	; 239
     fb6:	fc 01       	movw	r30, r24
     fb8:	20 83       	st	Z, r18
			_delay_loop_2(toff);
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	9c 81       	ldd	r25, Y+4	; 0x04
     fbe:	98 ab       	sts	0x58, r25
     fc0:	8f a7       	lds	r24, 0x7f
     fc2:	8f a5       	lds	r24, 0x6f
     fc4:	98 a9       	sts	0x48, r25
     fc6:	8c 01       	movw	r16, r24
     fc8:	c8 01       	movw	r24, r16
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	f1 f7       	brne	.-4      	; 0xfca <__stack+0x76b>
     fce:	8c 01       	movw	r16, r24
     fd0:	18 ab       	sts	0x58, r17
     fd2:	0f a7       	lds	r16, 0x7f
			CLR_BIT(PORTA,7);
			CLR_BIT(PORTA, 5);
			CLR_BIT(PORTA,6);
			CLR_BIT(PORTA, 4);
		}
    }
     fd4:	b1 cb       	rjmp	.-2206   	; 0x738 <main+0xe8>
			SET_BIT(PORTA, 5);
			CLR_BIT(PORTA,6);
			CLR_BIT(PORTA, 4);
			_delay_loop_2(toff);
		}
		else if (direction=='S')
     fd6:	80 91 84 00 	lds	r24, 0x0084
     fda:	83 35       	cpi	r24, 0x53	; 83
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <__stack+0x781>
     fde:	ac cb       	rjmp	.-2216   	; 0x738 <main+0xe8>
		{
			CLR_BIT(PORTA,7);
     fe0:	8b e3       	ldi	r24, 0x3B	; 59
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	2b e3       	ldi	r18, 0x3B	; 59
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	f9 01       	movw	r30, r18
     fea:	20 81       	ld	r18, Z
     fec:	2f 77       	andi	r18, 0x7F	; 127
     fee:	fc 01       	movw	r30, r24
     ff0:	20 83       	st	Z, r18
			CLR_BIT(PORTA, 5);
     ff2:	8b e3       	ldi	r24, 0x3B	; 59
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	2b e3       	ldi	r18, 0x3B	; 59
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	f9 01       	movw	r30, r18
     ffc:	20 81       	ld	r18, Z
     ffe:	2f 7d       	andi	r18, 0xDF	; 223
    1000:	fc 01       	movw	r30, r24
    1002:	20 83       	st	Z, r18
			CLR_BIT(PORTA,6);
    1004:	8b e3       	ldi	r24, 0x3B	; 59
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	2b e3       	ldi	r18, 0x3B	; 59
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	f9 01       	movw	r30, r18
    100e:	20 81       	ld	r18, Z
    1010:	2f 7b       	andi	r18, 0xBF	; 191
    1012:	fc 01       	movw	r30, r24
    1014:	20 83       	st	Z, r18
			CLR_BIT(PORTA, 4);
    1016:	8b e3       	ldi	r24, 0x3B	; 59
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	2b e3       	ldi	r18, 0x3B	; 59
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	f9 01       	movw	r30, r18
    1020:	20 81       	ld	r18, Z
    1022:	2f 7e       	andi	r18, 0xEF	; 239
    1024:	fc 01       	movw	r30, r24
    1026:	20 83       	st	Z, r18
		}
    }
    1028:	87 cb       	rjmp	.-2290   	; 0x738 <main+0xe8>

0000102a <__vector_9>:
}

ISR(TIMER1_OVF_vect)
{
    102a:	1f 92       	push	r1
    102c:	0f 92       	push	r0
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	0f 92       	push	r0
    1032:	11 24       	eor	r1, r1
    1034:	8f 93       	push	r24
    1036:	9f 93       	push	r25
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
	TimerOverflow++;	/* Increment Timer Overflow count */
    1040:	80 91 82 00 	lds	r24, 0x0082
    1044:	90 91 83 00 	lds	r25, 0x0083
    1048:	01 96       	adiw	r24, 0x01	; 1
    104a:	90 93 83 00 	sts	0x0083, r25
    104e:	80 93 82 00 	sts	0x0082, r24
}
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	9f 91       	pop	r25
    1058:	8f 91       	pop	r24
    105a:	0f 90       	pop	r0
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	0f 90       	pop	r0
    1060:	1f 90       	pop	r1
    1062:	18 95       	reti

00001064 <__vector_13>:


ISR(USART_RXC_vect)
{
    1064:	1f 92       	push	r1
    1066:	0f 92       	push	r0
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	0f 92       	push	r0
    106c:	11 24       	eor	r1, r1
    106e:	8f 93       	push	r24
    1070:	9f 93       	push	r25
    1072:	ef 93       	push	r30
    1074:	ff 93       	push	r31
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
	speed = UDR;
    107e:	8c e2       	ldi	r24, 0x2C	; 44
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	fc 01       	movw	r30, r24
    1084:	80 81       	ld	r24, Z
    1086:	80 93 85 00 	sts	0x0085, r24
	direction = UDR;
    108a:	8c e2       	ldi	r24, 0x2C	; 44
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	fc 01       	movw	r30, r24
    1090:	80 81       	ld	r24, Z
    1092:	80 93 84 00 	sts	0x0084, r24
}
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	ff 91       	pop	r31
    109c:	ef 91       	pop	r30
    109e:	9f 91       	pop	r25
    10a0:	8f 91       	pop	r24
    10a2:	0f 90       	pop	r0
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	0f 90       	pop	r0
    10a8:	1f 90       	pop	r1
    10aa:	18 95       	reti

000010ac <LCD_initialize>:
#define RW 3
#define  F_CPU 8000000UL


void LCD_initialize ()
{	_delay_ms(1000);
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	c6 54       	subi	r28, 0x46	; 70
    10ba:	d0 40       	sbci	r29, 0x00	; 0
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	aa e7       	ldi	r26, 0x7A	; 122
    10cc:	b4 e4       	ldi	r27, 0x44	; 68
    10ce:	89 83       	std	Y+1, r24	; 0x01
    10d0:	9a 83       	std	Y+2, r25	; 0x02
    10d2:	ab 83       	std	Y+3, r26	; 0x03
    10d4:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    10d6:	69 81       	ldd	r22, Y+1	; 0x01
    10d8:	7a 81       	ldd	r23, Y+2	; 0x02
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	9c 81       	ldd	r25, Y+4	; 0x04
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	4a e7       	ldi	r20, 0x7A	; 122
    10e4:	53 e4       	ldi	r21, 0x43	; 67
    10e6:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	8d 83       	std	Y+5, r24	; 0x05
    10f0:	9e 83       	std	Y+6, r25	; 0x06
    10f2:	af 83       	std	Y+7, r26	; 0x07
    10f4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    10f6:	11 e0       	ldi	r17, 0x01	; 1
    10f8:	6d 81       	ldd	r22, Y+5	; 0x05
    10fa:	7e 81       	ldd	r23, Y+6	; 0x06
    10fc:	8f 81       	ldd	r24, Y+7	; 0x07
    10fe:	98 85       	ldd	r25, Y+8	; 0x08
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e8       	ldi	r20, 0x80	; 128
    1106:	5f e3       	ldi	r21, 0x3F	; 63
    1108:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__cmpsf2>
    110c:	88 23       	and	r24, r24
    110e:	0c f0       	brlt	.+2      	; 0x1112 <LCD_initialize+0x66>
    1110:	10 e0       	ldi	r17, 0x00	; 0
    1112:	11 23       	and	r17, r17
    1114:	29 f0       	breq	.+10     	; 0x1120 <LCD_initialize+0x74>
		__ticks = 1;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	9a 87       	std	Y+10, r25	; 0x0a
    111c:	89 87       	std	Y+9, r24	; 0x09
    111e:	46 c0       	rjmp	.+140    	; 0x11ac <LCD_initialize+0x100>
	else if (__tmp > 65535)
    1120:	11 e0       	ldi	r17, 0x01	; 1
    1122:	6d 81       	ldd	r22, Y+5	; 0x05
    1124:	7e 81       	ldd	r23, Y+6	; 0x06
    1126:	8f 81       	ldd	r24, Y+7	; 0x07
    1128:	98 85       	ldd	r25, Y+8	; 0x08
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	3f ef       	ldi	r19, 0xFF	; 255
    112e:	4f e7       	ldi	r20, 0x7F	; 127
    1130:	57 e4       	ldi	r21, 0x47	; 71
    1132:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
    1136:	18 16       	cp	r1, r24
    1138:	0c f0       	brlt	.+2      	; 0x113c <LCD_initialize+0x90>
    113a:	10 e0       	ldi	r17, 0x00	; 0
    113c:	11 23       	and	r17, r17
    113e:	61 f1       	breq	.+88     	; 0x1198 <LCD_initialize+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1140:	69 81       	ldd	r22, Y+1	; 0x01
    1142:	7a 81       	ldd	r23, Y+2	; 0x02
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	9c 81       	ldd	r25, Y+4	; 0x04
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	40 e2       	ldi	r20, 0x20	; 32
    114e:	51 e4       	ldi	r21, 0x41	; 65
    1150:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	bc 01       	movw	r22, r24
    115a:	cd 01       	movw	r24, r26
    115c:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	9a 87       	std	Y+10, r25	; 0x0a
    1166:	89 87       	std	Y+9, r24	; 0x09
    1168:	12 c0       	rjmp	.+36     	; 0x118e <LCD_initialize+0xe2>
    116a:	89 e1       	ldi	r24, 0x19	; 25
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	9c 87       	std	Y+12, r25	; 0x0c
    1170:	8b 87       	std	Y+11, r24	; 0x0b
    1172:	8b 85       	ldd	r24, Y+11	; 0x0b
    1174:	9c 85       	ldd	r25, Y+12	; 0x0c
    1176:	8c 01       	movw	r16, r24
    1178:	c8 01       	movw	r24, r16
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	f1 f7       	brne	.-4      	; 0x117a <LCD_initialize+0xce>
    117e:	8c 01       	movw	r16, r24
    1180:	1c 87       	std	Y+12, r17	; 0x0c
    1182:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1184:	89 85       	ldd	r24, Y+9	; 0x09
    1186:	9a 85       	ldd	r25, Y+10	; 0x0a
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	9a 87       	std	Y+10, r25	; 0x0a
    118c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    118e:	89 85       	ldd	r24, Y+9	; 0x09
    1190:	9a 85       	ldd	r25, Y+10	; 0x0a
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	51 f7       	brne	.-44     	; 0x116a <LCD_initialize+0xbe>
    1196:	17 c0       	rjmp	.+46     	; 0x11c6 <LCD_initialize+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1198:	6d 81       	ldd	r22, Y+5	; 0x05
    119a:	7e 81       	ldd	r23, Y+6	; 0x06
    119c:	8f 81       	ldd	r24, Y+7	; 0x07
    119e:	98 85       	ldd	r25, Y+8	; 0x08
    11a0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	9a 87       	std	Y+10, r25	; 0x0a
    11aa:	89 87       	std	Y+9, r24	; 0x09
    11ac:	89 85       	ldd	r24, Y+9	; 0x09
    11ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b0:	9e 87       	std	Y+14, r25	; 0x0e
    11b2:	8d 87       	std	Y+13, r24	; 0x0d
    11b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b8:	8c 01       	movw	r16, r24
    11ba:	f8 01       	movw	r30, r16
    11bc:	31 97       	sbiw	r30, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <LCD_initialize+0x110>
    11c0:	8f 01       	movw	r16, r30
    11c2:	1e 87       	std	Y+14, r17	; 0x0e
    11c4:	0d 87       	std	Y+13, r16	; 0x0d
	DIO_setdir(portname,0,1);
    11c6:	82 e4       	ldi	r24, 0x42	; 66
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	41 e0       	ldi	r20, 0x01	; 1
    11cc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setdir>
	DIO_setdir(portname,1,1);
    11d0:	82 e4       	ldi	r24, 0x42	; 66
    11d2:	61 e0       	ldi	r22, 0x01	; 1
    11d4:	41 e0       	ldi	r20, 0x01	; 1
    11d6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setdir>
	DIO_setdir(portname,2,1);
    11da:	82 e4       	ldi	r24, 0x42	; 66
    11dc:	62 e0       	ldi	r22, 0x02	; 2
    11de:	41 e0       	ldi	r20, 0x01	; 1
    11e0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setdir>
	DIO_setdir(portname,3,1);
    11e4:	82 e4       	ldi	r24, 0x42	; 66
    11e6:	63 e0       	ldi	r22, 0x03	; 3
    11e8:	41 e0       	ldi	r20, 0x01	; 1
    11ea:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setdir>
	DIO_setdir(portname,4,1);
    11ee:	82 e4       	ldi	r24, 0x42	; 66
    11f0:	64 e0       	ldi	r22, 0x04	; 4
    11f2:	41 e0       	ldi	r20, 0x01	; 1
    11f4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setdir>
	DIO_setdir(portname,5,1);
    11f8:	82 e4       	ldi	r24, 0x42	; 66
    11fa:	65 e0       	ldi	r22, 0x05	; 5
    11fc:	41 e0       	ldi	r20, 0x01	; 1
    11fe:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setdir>
	DIO_setdir(portname,6,1);
    1202:	82 e4       	ldi	r24, 0x42	; 66
    1204:	66 e0       	ldi	r22, 0x06	; 6
    1206:	41 e0       	ldi	r20, 0x01	; 1
    1208:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setdir>
	DIO_setdir(portname,7,1);
    120c:	82 e4       	ldi	r24, 0x42	; 66
    120e:	67 e0       	ldi	r22, 0x07	; 7
    1210:	41 e0       	ldi	r20, 0x01	; 1
    1212:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setdir>
	DIO_setdir(bitsport,EN,1);
    1216:	81 e4       	ldi	r24, 0x41	; 65
    1218:	61 e0       	ldi	r22, 0x01	; 1
    121a:	41 e0       	ldi	r20, 0x01	; 1
    121c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setdir>
	DIO_setdir(bitsport,RW,1);
    1220:	81 e4       	ldi	r24, 0x41	; 65
    1222:	63 e0       	ldi	r22, 0x03	; 3
    1224:	41 e0       	ldi	r20, 0x01	; 1
    1226:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setdir>
	DIO_setdir(bitsport,RS,1);
    122a:	81 e4       	ldi	r24, 0x41	; 65
    122c:	62 e0       	ldi	r22, 0x02	; 2
    122e:	41 e0       	ldi	r20, 0x01	; 1
    1230:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setdir>
	
	LCD_send_cmd( 0x38); //8 bit mode
    1234:	88 e3       	ldi	r24, 0x38	; 56
    1236:	0e 94 96 0c 	call	0x192c	; 0x192c <LCD_send_cmd>
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	a8 e4       	ldi	r26, 0x48	; 72
    1240:	b3 e4       	ldi	r27, 0x43	; 67
    1242:	8f 87       	std	Y+15, r24	; 0x0f
    1244:	98 8b       	std	Y+16, r25	; 0x10
    1246:	a9 8b       	std	Y+17, r26	; 0x11
    1248:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    124a:	6f 85       	ldd	r22, Y+15	; 0x0f
    124c:	78 89       	ldd	r23, Y+16	; 0x10
    124e:	89 89       	ldd	r24, Y+17	; 0x11
    1250:	9a 89       	ldd	r25, Y+18	; 0x12
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	4a e7       	ldi	r20, 0x7A	; 122
    1258:	53 e4       	ldi	r21, 0x43	; 67
    125a:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	8b 8b       	std	Y+19, r24	; 0x13
    1264:	9c 8b       	std	Y+20, r25	; 0x14
    1266:	ad 8b       	std	Y+21, r26	; 0x15
    1268:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    126a:	11 e0       	ldi	r17, 0x01	; 1
    126c:	6b 89       	ldd	r22, Y+19	; 0x13
    126e:	7c 89       	ldd	r23, Y+20	; 0x14
    1270:	8d 89       	ldd	r24, Y+21	; 0x15
    1272:	9e 89       	ldd	r25, Y+22	; 0x16
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e8       	ldi	r20, 0x80	; 128
    127a:	5f e3       	ldi	r21, 0x3F	; 63
    127c:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__cmpsf2>
    1280:	88 23       	and	r24, r24
    1282:	0c f0       	brlt	.+2      	; 0x1286 <LCD_initialize+0x1da>
    1284:	10 e0       	ldi	r17, 0x00	; 0
    1286:	11 23       	and	r17, r17
    1288:	29 f0       	breq	.+10     	; 0x1294 <LCD_initialize+0x1e8>
		__ticks = 1;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	98 8f       	std	Y+24, r25	; 0x18
    1290:	8f 8b       	std	Y+23, r24	; 0x17
    1292:	46 c0       	rjmp	.+140    	; 0x1320 <LCD_initialize+0x274>
	else if (__tmp > 65535)
    1294:	11 e0       	ldi	r17, 0x01	; 1
    1296:	6b 89       	ldd	r22, Y+19	; 0x13
    1298:	7c 89       	ldd	r23, Y+20	; 0x14
    129a:	8d 89       	ldd	r24, Y+21	; 0x15
    129c:	9e 89       	ldd	r25, Y+22	; 0x16
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	3f ef       	ldi	r19, 0xFF	; 255
    12a2:	4f e7       	ldi	r20, 0x7F	; 127
    12a4:	57 e4       	ldi	r21, 0x47	; 71
    12a6:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
    12aa:	18 16       	cp	r1, r24
    12ac:	0c f0       	brlt	.+2      	; 0x12b0 <LCD_initialize+0x204>
    12ae:	10 e0       	ldi	r17, 0x00	; 0
    12b0:	11 23       	and	r17, r17
    12b2:	61 f1       	breq	.+88     	; 0x130c <LCD_initialize+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b4:	6f 85       	ldd	r22, Y+15	; 0x0f
    12b6:	78 89       	ldd	r23, Y+16	; 0x10
    12b8:	89 89       	ldd	r24, Y+17	; 0x11
    12ba:	9a 89       	ldd	r25, Y+18	; 0x12
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e2       	ldi	r20, 0x20	; 32
    12c2:	51 e4       	ldi	r21, 0x41	; 65
    12c4:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	bc 01       	movw	r22, r24
    12ce:	cd 01       	movw	r24, r26
    12d0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	98 8f       	std	Y+24, r25	; 0x18
    12da:	8f 8b       	std	Y+23, r24	; 0x17
    12dc:	12 c0       	rjmp	.+36     	; 0x1302 <LCD_initialize+0x256>
    12de:	89 e1       	ldi	r24, 0x19	; 25
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	9a 8f       	std	Y+26, r25	; 0x1a
    12e4:	89 8f       	std	Y+25, r24	; 0x19
    12e6:	89 8d       	ldd	r24, Y+25	; 0x19
    12e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    12ea:	8c 01       	movw	r16, r24
    12ec:	c8 01       	movw	r24, r16
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	f1 f7       	brne	.-4      	; 0x12ee <LCD_initialize+0x242>
    12f2:	8c 01       	movw	r16, r24
    12f4:	1a 8f       	std	Y+26, r17	; 0x1a
    12f6:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f8:	8f 89       	ldd	r24, Y+23	; 0x17
    12fa:	98 8d       	ldd	r25, Y+24	; 0x18
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	98 8f       	std	Y+24, r25	; 0x18
    1300:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1302:	8f 89       	ldd	r24, Y+23	; 0x17
    1304:	98 8d       	ldd	r25, Y+24	; 0x18
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	51 f7       	brne	.-44     	; 0x12de <LCD_initialize+0x232>
    130a:	17 c0       	rjmp	.+46     	; 0x133a <LCD_initialize+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    130c:	6b 89       	ldd	r22, Y+19	; 0x13
    130e:	7c 89       	ldd	r23, Y+20	; 0x14
    1310:	8d 89       	ldd	r24, Y+21	; 0x15
    1312:	9e 89       	ldd	r25, Y+22	; 0x16
    1314:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	98 8f       	std	Y+24, r25	; 0x18
    131e:	8f 8b       	std	Y+23, r24	; 0x17
    1320:	8f 89       	ldd	r24, Y+23	; 0x17
    1322:	98 8d       	ldd	r25, Y+24	; 0x18
    1324:	9c 8f       	std	Y+28, r25	; 0x1c
    1326:	8b 8f       	std	Y+27, r24	; 0x1b
    1328:	8b 8d       	ldd	r24, Y+27	; 0x1b
    132a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    132c:	8c 01       	movw	r16, r24
    132e:	f8 01       	movw	r30, r16
    1330:	31 97       	sbiw	r30, 0x01	; 1
    1332:	f1 f7       	brne	.-4      	; 0x1330 <LCD_initialize+0x284>
    1334:	8f 01       	movw	r16, r30
    1336:	1c 8f       	std	Y+28, r17	; 0x1c
    1338:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(200);
	LCD_send_cmd(0x0e);//display on cursor on
    133a:	8e e0       	ldi	r24, 0x0E	; 14
    133c:	0e 94 96 0c 	call	0x192c	; 0x192c <LCD_send_cmd>
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	a8 e4       	ldi	r26, 0x48	; 72
    1346:	b3 e4       	ldi	r27, 0x43	; 67
    1348:	8d 8f       	std	Y+29, r24	; 0x1d
    134a:	9e 8f       	std	Y+30, r25	; 0x1e
    134c:	af 8f       	std	Y+31, r26	; 0x1f
    134e:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1350:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1352:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1354:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1356:	98 a1       	lds	r25, 0x48
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	4a e7       	ldi	r20, 0x7A	; 122
    135e:	53 e4       	ldi	r21, 0x43	; 67
    1360:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    1364:	dc 01       	movw	r26, r24
    1366:	cb 01       	movw	r24, r22
    1368:	89 a3       	lds	r24, 0x59
    136a:	9a a3       	lds	r25, 0x5a
    136c:	ab a3       	lds	r26, 0x5b
    136e:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    1370:	11 e0       	ldi	r17, 0x01	; 1
    1372:	69 a1       	lds	r22, 0x49
    1374:	7a a1       	lds	r23, 0x4a
    1376:	8b a1       	lds	r24, 0x4b
    1378:	9c a1       	lds	r25, 0x4c
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e8       	ldi	r20, 0x80	; 128
    1380:	5f e3       	ldi	r21, 0x3F	; 63
    1382:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__cmpsf2>
    1386:	88 23       	and	r24, r24
    1388:	0c f0       	brlt	.+2      	; 0x138c <LCD_initialize+0x2e0>
    138a:	10 e0       	ldi	r17, 0x00	; 0
    138c:	11 23       	and	r17, r17
    138e:	29 f0       	breq	.+10     	; 0x139a <LCD_initialize+0x2ee>
		__ticks = 1;
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	9e a3       	lds	r25, 0x5e
    1396:	8d a3       	lds	r24, 0x5d
    1398:	46 c0       	rjmp	.+140    	; 0x1426 <LCD_initialize+0x37a>
	else if (__tmp > 65535)
    139a:	11 e0       	ldi	r17, 0x01	; 1
    139c:	69 a1       	lds	r22, 0x49
    139e:	7a a1       	lds	r23, 0x4a
    13a0:	8b a1       	lds	r24, 0x4b
    13a2:	9c a1       	lds	r25, 0x4c
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	3f ef       	ldi	r19, 0xFF	; 255
    13a8:	4f e7       	ldi	r20, 0x7F	; 127
    13aa:	57 e4       	ldi	r21, 0x47	; 71
    13ac:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
    13b0:	18 16       	cp	r1, r24
    13b2:	0c f0       	brlt	.+2      	; 0x13b6 <LCD_initialize+0x30a>
    13b4:	10 e0       	ldi	r17, 0x00	; 0
    13b6:	11 23       	and	r17, r17
    13b8:	61 f1       	breq	.+88     	; 0x1412 <LCD_initialize+0x366>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ba:	6d 8d       	ldd	r22, Y+29	; 0x1d
    13bc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    13be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13c0:	98 a1       	lds	r25, 0x48
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e2       	ldi	r20, 0x20	; 32
    13c8:	51 e4       	ldi	r21, 0x41	; 65
    13ca:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	bc 01       	movw	r22, r24
    13d4:	cd 01       	movw	r24, r26
    13d6:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	9e a3       	lds	r25, 0x5e
    13e0:	8d a3       	lds	r24, 0x5d
    13e2:	12 c0       	rjmp	.+36     	; 0x1408 <LCD_initialize+0x35c>
    13e4:	89 e1       	ldi	r24, 0x19	; 25
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	98 a7       	lds	r25, 0x78
    13ea:	8f a3       	lds	r24, 0x5f
    13ec:	8f a1       	lds	r24, 0x4f
    13ee:	98 a5       	lds	r25, 0x68
    13f0:	8c 01       	movw	r16, r24
    13f2:	c8 01       	movw	r24, r16
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <LCD_initialize+0x348>
    13f8:	8c 01       	movw	r16, r24
    13fa:	18 a7       	lds	r17, 0x78
    13fc:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fe:	8d a1       	lds	r24, 0x4d
    1400:	9e a1       	lds	r25, 0x4e
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	9e a3       	lds	r25, 0x5e
    1406:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1408:	8d a1       	lds	r24, 0x4d
    140a:	9e a1       	lds	r25, 0x4e
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	51 f7       	brne	.-44     	; 0x13e4 <LCD_initialize+0x338>
    1410:	17 c0       	rjmp	.+46     	; 0x1440 <LCD_initialize+0x394>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1412:	69 a1       	lds	r22, 0x49
    1414:	7a a1       	lds	r23, 0x4a
    1416:	8b a1       	lds	r24, 0x4b
    1418:	9c a1       	lds	r25, 0x4c
    141a:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	9e a3       	lds	r25, 0x5e
    1424:	8d a3       	lds	r24, 0x5d
    1426:	8d a1       	lds	r24, 0x4d
    1428:	9e a1       	lds	r25, 0x4e
    142a:	9a a7       	lds	r25, 0x7a
    142c:	89 a7       	lds	r24, 0x79
    142e:	89 a5       	lds	r24, 0x69
    1430:	9a a5       	lds	r25, 0x6a
    1432:	8c 01       	movw	r16, r24
    1434:	f8 01       	movw	r30, r16
    1436:	31 97       	sbiw	r30, 0x01	; 1
    1438:	f1 f7       	brne	.-4      	; 0x1436 <LCD_initialize+0x38a>
    143a:	8f 01       	movw	r16, r30
    143c:	1a a7       	lds	r17, 0x7a
    143e:	09 a7       	lds	r16, 0x79
	_delay_ms(200);
	LCD_send_cmd(0x01);//clear the screen
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	0e 94 96 0c 	call	0x192c	; 0x192c <LCD_send_cmd>
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	a8 e4       	ldi	r26, 0x48	; 72
    144c:	b3 e4       	ldi	r27, 0x43	; 67
    144e:	8b a7       	lds	r24, 0x7b
    1450:	9c a7       	lds	r25, 0x7c
    1452:	ad a7       	lds	r26, 0x7d
    1454:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1456:	6b a5       	lds	r22, 0x6b
    1458:	7c a5       	lds	r23, 0x6c
    145a:	8d a5       	lds	r24, 0x6d
    145c:	9e a5       	lds	r25, 0x6e
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	4a e7       	ldi	r20, 0x7A	; 122
    1464:	53 e4       	ldi	r21, 0x43	; 67
    1466:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	8f a7       	lds	r24, 0x7f
    1470:	98 ab       	sts	0x58, r25
    1472:	a9 ab       	sts	0x59, r26
    1474:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    1476:	11 e0       	ldi	r17, 0x01	; 1
    1478:	6f a5       	lds	r22, 0x6f
    147a:	78 a9       	sts	0x48, r23
    147c:	89 a9       	sts	0x49, r24
    147e:	9a a9       	sts	0x4a, r25
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	40 e8       	ldi	r20, 0x80	; 128
    1486:	5f e3       	ldi	r21, 0x3F	; 63
    1488:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__cmpsf2>
    148c:	88 23       	and	r24, r24
    148e:	0c f0       	brlt	.+2      	; 0x1492 <LCD_initialize+0x3e6>
    1490:	10 e0       	ldi	r17, 0x00	; 0
    1492:	11 23       	and	r17, r17
    1494:	29 f0       	breq	.+10     	; 0x14a0 <LCD_initialize+0x3f4>
		__ticks = 1;
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	9c ab       	sts	0x5c, r25
    149c:	8b ab       	sts	0x5b, r24
    149e:	46 c0       	rjmp	.+140    	; 0x152c <LCD_initialize+0x480>
	else if (__tmp > 65535)
    14a0:	11 e0       	ldi	r17, 0x01	; 1
    14a2:	6f a5       	lds	r22, 0x6f
    14a4:	78 a9       	sts	0x48, r23
    14a6:	89 a9       	sts	0x49, r24
    14a8:	9a a9       	sts	0x4a, r25
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	3f ef       	ldi	r19, 0xFF	; 255
    14ae:	4f e7       	ldi	r20, 0x7F	; 127
    14b0:	57 e4       	ldi	r21, 0x47	; 71
    14b2:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
    14b6:	18 16       	cp	r1, r24
    14b8:	0c f0       	brlt	.+2      	; 0x14bc <LCD_initialize+0x410>
    14ba:	10 e0       	ldi	r17, 0x00	; 0
    14bc:	11 23       	and	r17, r17
    14be:	61 f1       	breq	.+88     	; 0x1518 <LCD_initialize+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c0:	6b a5       	lds	r22, 0x6b
    14c2:	7c a5       	lds	r23, 0x6c
    14c4:	8d a5       	lds	r24, 0x6d
    14c6:	9e a5       	lds	r25, 0x6e
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	40 e2       	ldi	r20, 0x20	; 32
    14ce:	51 e4       	ldi	r21, 0x41	; 65
    14d0:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	bc 01       	movw	r22, r24
    14da:	cd 01       	movw	r24, r26
    14dc:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	9c ab       	sts	0x5c, r25
    14e6:	8b ab       	sts	0x5b, r24
    14e8:	12 c0       	rjmp	.+36     	; 0x150e <LCD_initialize+0x462>
    14ea:	89 e1       	ldi	r24, 0x19	; 25
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	9e ab       	sts	0x5e, r25
    14f0:	8d ab       	sts	0x5d, r24
    14f2:	8d a9       	sts	0x4d, r24
    14f4:	9e a9       	sts	0x4e, r25
    14f6:	8c 01       	movw	r16, r24
    14f8:	c8 01       	movw	r24, r16
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	f1 f7       	brne	.-4      	; 0x14fa <LCD_initialize+0x44e>
    14fe:	8c 01       	movw	r16, r24
    1500:	1e ab       	sts	0x5e, r17
    1502:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1504:	8b a9       	sts	0x4b, r24
    1506:	9c a9       	sts	0x4c, r25
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	9c ab       	sts	0x5c, r25
    150c:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150e:	8b a9       	sts	0x4b, r24
    1510:	9c a9       	sts	0x4c, r25
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	51 f7       	brne	.-44     	; 0x14ea <LCD_initialize+0x43e>
    1516:	17 c0       	rjmp	.+46     	; 0x1546 <LCD_initialize+0x49a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1518:	6f a5       	lds	r22, 0x6f
    151a:	78 a9       	sts	0x48, r23
    151c:	89 a9       	sts	0x49, r24
    151e:	9a a9       	sts	0x4a, r25
    1520:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	9c ab       	sts	0x5c, r25
    152a:	8b ab       	sts	0x5b, r24
    152c:	8b a9       	sts	0x4b, r24
    152e:	9c a9       	sts	0x4c, r25
    1530:	98 af       	sts	0x78, r25
    1532:	8f ab       	sts	0x5f, r24
    1534:	8f a9       	sts	0x4f, r24
    1536:	98 ad       	sts	0x68, r25
    1538:	8c 01       	movw	r16, r24
    153a:	f8 01       	movw	r30, r16
    153c:	31 97       	sbiw	r30, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <LCD_initialize+0x490>
    1540:	8f 01       	movw	r16, r30
    1542:	18 af       	sts	0x78, r17
    1544:	0f ab       	sts	0x5f, r16
	_delay_ms(200);
	LCD_send_cmd(0x06); //entry mode
    1546:	86 e0       	ldi	r24, 0x06	; 6
    1548:	0e 94 96 0c 	call	0x192c	; 0x192c <LCD_send_cmd>
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	a8 e4       	ldi	r26, 0x48	; 72
    1552:	b3 e4       	ldi	r27, 0x43	; 67
    1554:	89 af       	sts	0x79, r24
    1556:	9a af       	sts	0x7a, r25
    1558:	ab af       	sts	0x7b, r26
    155a:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    155c:	69 ad       	sts	0x69, r22
    155e:	7a ad       	sts	0x6a, r23
    1560:	8b ad       	sts	0x6b, r24
    1562:	9c ad       	sts	0x6c, r25
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	4a e7       	ldi	r20, 0x7A	; 122
    156a:	53 e4       	ldi	r21, 0x43	; 67
    156c:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	9e 01       	movw	r18, r28
    1576:	23 5c       	subi	r18, 0xC3	; 195
    1578:	3f 4f       	sbci	r19, 0xFF	; 255
    157a:	f9 01       	movw	r30, r18
    157c:	80 83       	st	Z, r24
    157e:	91 83       	std	Z+1, r25	; 0x01
    1580:	a2 83       	std	Z+2, r26	; 0x02
    1582:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1584:	11 e0       	ldi	r17, 0x01	; 1
    1586:	ce 01       	movw	r24, r28
    1588:	cd 96       	adiw	r24, 0x3d	; 61
    158a:	fc 01       	movw	r30, r24
    158c:	60 81       	ld	r22, Z
    158e:	71 81       	ldd	r23, Z+1	; 0x01
    1590:	82 81       	ldd	r24, Z+2	; 0x02
    1592:	93 81       	ldd	r25, Z+3	; 0x03
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	40 e8       	ldi	r20, 0x80	; 128
    159a:	5f e3       	ldi	r21, 0x3F	; 63
    159c:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__cmpsf2>
    15a0:	88 23       	and	r24, r24
    15a2:	0c f0       	brlt	.+2      	; 0x15a6 <LCD_initialize+0x4fa>
    15a4:	10 e0       	ldi	r17, 0x00	; 0
    15a6:	11 23       	and	r17, r17
    15a8:	49 f0       	breq	.+18     	; 0x15bc <LCD_initialize+0x510>
		__ticks = 1;
    15aa:	ce 01       	movw	r24, r28
    15ac:	8f 5b       	subi	r24, 0xBF	; 191
    15ae:	9f 4f       	sbci	r25, 0xFF	; 255
    15b0:	21 e0       	ldi	r18, 0x01	; 1
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	fc 01       	movw	r30, r24
    15b6:	31 83       	std	Z+1, r19	; 0x01
    15b8:	20 83       	st	Z, r18
    15ba:	6e c0       	rjmp	.+220    	; 0x1698 <LCD_initialize+0x5ec>
	else if (__tmp > 65535)
    15bc:	11 e0       	ldi	r17, 0x01	; 1
    15be:	ce 01       	movw	r24, r28
    15c0:	cd 96       	adiw	r24, 0x3d	; 61
    15c2:	fc 01       	movw	r30, r24
    15c4:	60 81       	ld	r22, Z
    15c6:	71 81       	ldd	r23, Z+1	; 0x01
    15c8:	82 81       	ldd	r24, Z+2	; 0x02
    15ca:	93 81       	ldd	r25, Z+3	; 0x03
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	3f ef       	ldi	r19, 0xFF	; 255
    15d0:	4f e7       	ldi	r20, 0x7F	; 127
    15d2:	57 e4       	ldi	r21, 0x47	; 71
    15d4:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
    15d8:	18 16       	cp	r1, r24
    15da:	0c f0       	brlt	.+2      	; 0x15de <LCD_initialize+0x532>
    15dc:	10 e0       	ldi	r17, 0x00	; 0
    15de:	11 23       	and	r17, r17
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <LCD_initialize+0x538>
    15e2:	49 c0       	rjmp	.+146    	; 0x1676 <LCD_initialize+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e4:	69 ad       	sts	0x69, r22
    15e6:	7a ad       	sts	0x6a, r23
    15e8:	8b ad       	sts	0x6b, r24
    15ea:	9c ad       	sts	0x6c, r25
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e2       	ldi	r20, 0x20	; 32
    15f2:	51 e4       	ldi	r21, 0x41	; 65
    15f4:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	8e 01       	movw	r16, r28
    15fe:	0f 5b       	subi	r16, 0xBF	; 191
    1600:	1f 4f       	sbci	r17, 0xFF	; 255
    1602:	bc 01       	movw	r22, r24
    1604:	cd 01       	movw	r24, r26
    1606:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	f8 01       	movw	r30, r16
    1610:	91 83       	std	Z+1, r25	; 0x01
    1612:	80 83       	st	Z, r24
    1614:	27 c0       	rjmp	.+78     	; 0x1664 <LCD_initialize+0x5b8>
    1616:	ce 01       	movw	r24, r28
    1618:	8d 5b       	subi	r24, 0xBD	; 189
    161a:	9f 4f       	sbci	r25, 0xFF	; 255
    161c:	29 e1       	ldi	r18, 0x19	; 25
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	fc 01       	movw	r30, r24
    1622:	31 83       	std	Z+1, r19	; 0x01
    1624:	20 83       	st	Z, r18
    1626:	ce 01       	movw	r24, r28
    1628:	8d 5b       	subi	r24, 0xBD	; 189
    162a:	9f 4f       	sbci	r25, 0xFF	; 255
    162c:	fc 01       	movw	r30, r24
    162e:	80 81       	ld	r24, Z
    1630:	91 81       	ldd	r25, Z+1	; 0x01
    1632:	8c 01       	movw	r16, r24
    1634:	c8 01       	movw	r24, r16
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	f1 f7       	brne	.-4      	; 0x1636 <LCD_initialize+0x58a>
    163a:	8c 01       	movw	r16, r24
    163c:	ce 01       	movw	r24, r28
    163e:	8d 5b       	subi	r24, 0xBD	; 189
    1640:	9f 4f       	sbci	r25, 0xFF	; 255
    1642:	fc 01       	movw	r30, r24
    1644:	11 83       	std	Z+1, r17	; 0x01
    1646:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1648:	ce 01       	movw	r24, r28
    164a:	8f 5b       	subi	r24, 0xBF	; 191
    164c:	9f 4f       	sbci	r25, 0xFF	; 255
    164e:	9e 01       	movw	r18, r28
    1650:	2f 5b       	subi	r18, 0xBF	; 191
    1652:	3f 4f       	sbci	r19, 0xFF	; 255
    1654:	f9 01       	movw	r30, r18
    1656:	20 81       	ld	r18, Z
    1658:	31 81       	ldd	r19, Z+1	; 0x01
    165a:	21 50       	subi	r18, 0x01	; 1
    165c:	30 40       	sbci	r19, 0x00	; 0
    165e:	fc 01       	movw	r30, r24
    1660:	31 83       	std	Z+1, r19	; 0x01
    1662:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1664:	ce 01       	movw	r24, r28
    1666:	8f 5b       	subi	r24, 0xBF	; 191
    1668:	9f 4f       	sbci	r25, 0xFF	; 255
    166a:	fc 01       	movw	r30, r24
    166c:	80 81       	ld	r24, Z
    166e:	91 81       	ldd	r25, Z+1	; 0x01
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	89 f6       	brne	.-94     	; 0x1616 <LCD_initialize+0x56a>
    1674:	2e c0       	rjmp	.+92     	; 0x16d2 <LCD_initialize+0x626>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1676:	8e 01       	movw	r16, r28
    1678:	0f 5b       	subi	r16, 0xBF	; 191
    167a:	1f 4f       	sbci	r17, 0xFF	; 255
    167c:	ce 01       	movw	r24, r28
    167e:	cd 96       	adiw	r24, 0x3d	; 61
    1680:	fc 01       	movw	r30, r24
    1682:	60 81       	ld	r22, Z
    1684:	71 81       	ldd	r23, Z+1	; 0x01
    1686:	82 81       	ldd	r24, Z+2	; 0x02
    1688:	93 81       	ldd	r25, Z+3	; 0x03
    168a:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	f8 01       	movw	r30, r16
    1694:	91 83       	std	Z+1, r25	; 0x01
    1696:	80 83       	st	Z, r24
    1698:	ce 01       	movw	r24, r28
    169a:	8b 5b       	subi	r24, 0xBB	; 187
    169c:	9f 4f       	sbci	r25, 0xFF	; 255
    169e:	9e 01       	movw	r18, r28
    16a0:	2f 5b       	subi	r18, 0xBF	; 191
    16a2:	3f 4f       	sbci	r19, 0xFF	; 255
    16a4:	f9 01       	movw	r30, r18
    16a6:	20 81       	ld	r18, Z
    16a8:	31 81       	ldd	r19, Z+1	; 0x01
    16aa:	fc 01       	movw	r30, r24
    16ac:	31 83       	std	Z+1, r19	; 0x01
    16ae:	20 83       	st	Z, r18
    16b0:	ce 01       	movw	r24, r28
    16b2:	8b 5b       	subi	r24, 0xBB	; 187
    16b4:	9f 4f       	sbci	r25, 0xFF	; 255
    16b6:	fc 01       	movw	r30, r24
    16b8:	80 81       	ld	r24, Z
    16ba:	91 81       	ldd	r25, Z+1	; 0x01
    16bc:	8c 01       	movw	r16, r24
    16be:	c8 01       	movw	r24, r16
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	f1 f7       	brne	.-4      	; 0x16c0 <LCD_initialize+0x614>
    16c4:	8c 01       	movw	r16, r24
    16c6:	ce 01       	movw	r24, r28
    16c8:	8b 5b       	subi	r24, 0xBB	; 187
    16ca:	9f 4f       	sbci	r25, 0xFF	; 255
    16cc:	fc 01       	movw	r30, r24
    16ce:	11 83       	std	Z+1, r17	; 0x01
    16d0:	00 83       	st	Z, r16
	_delay_ms(200);
}
    16d2:	ca 5b       	subi	r28, 0xBA	; 186
    16d4:	df 4f       	sbci	r29, 0xFF	; 255
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	f8 94       	cli
    16da:	de bf       	out	0x3e, r29	; 62
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	cd bf       	out	0x3d, r28	; 61
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	1f 91       	pop	r17
    16e6:	0f 91       	pop	r16
    16e8:	08 95       	ret

000016ea <LCD_falling_edge>:

void LCD_falling_edge()
{
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	6c 97       	sbiw	r28, 0x1c	; 28
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
	DIO_write(bitsport, EN, 1);
    1702:	81 e4       	ldi	r24, 0x41	; 65
    1704:	61 e0       	ldi	r22, 0x01	; 1
    1706:	41 e0       	ldi	r20, 0x01	; 1
    1708:	0e 94 30 01 	call	0x260	; 0x260 <DIO_write>
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	a0 e0       	ldi	r26, 0x00	; 0
    1712:	b0 e4       	ldi	r27, 0x40	; 64
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	9a 83       	std	Y+2, r25	; 0x02
    1718:	ab 83       	std	Y+3, r26	; 0x03
    171a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    171c:	69 81       	ldd	r22, Y+1	; 0x01
    171e:	7a 81       	ldd	r23, Y+2	; 0x02
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	9c 81       	ldd	r25, Y+4	; 0x04
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	4a e7       	ldi	r20, 0x7A	; 122
    172a:	53 e4       	ldi	r21, 0x43	; 67
    172c:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	8d 83       	std	Y+5, r24	; 0x05
    1736:	9e 83       	std	Y+6, r25	; 0x06
    1738:	af 83       	std	Y+7, r26	; 0x07
    173a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    173c:	11 e0       	ldi	r17, 0x01	; 1
    173e:	6d 81       	ldd	r22, Y+5	; 0x05
    1740:	7e 81       	ldd	r23, Y+6	; 0x06
    1742:	8f 81       	ldd	r24, Y+7	; 0x07
    1744:	98 85       	ldd	r25, Y+8	; 0x08
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e8       	ldi	r20, 0x80	; 128
    174c:	5f e3       	ldi	r21, 0x3F	; 63
    174e:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__cmpsf2>
    1752:	88 23       	and	r24, r24
    1754:	0c f0       	brlt	.+2      	; 0x1758 <LCD_falling_edge+0x6e>
    1756:	10 e0       	ldi	r17, 0x00	; 0
    1758:	11 23       	and	r17, r17
    175a:	29 f0       	breq	.+10     	; 0x1766 <LCD_falling_edge+0x7c>
		__ticks = 1;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	9a 87       	std	Y+10, r25	; 0x0a
    1762:	89 87       	std	Y+9, r24	; 0x09
    1764:	46 c0       	rjmp	.+140    	; 0x17f2 <LCD_falling_edge+0x108>
	else if (__tmp > 65535)
    1766:	11 e0       	ldi	r17, 0x01	; 1
    1768:	6d 81       	ldd	r22, Y+5	; 0x05
    176a:	7e 81       	ldd	r23, Y+6	; 0x06
    176c:	8f 81       	ldd	r24, Y+7	; 0x07
    176e:	98 85       	ldd	r25, Y+8	; 0x08
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	3f ef       	ldi	r19, 0xFF	; 255
    1774:	4f e7       	ldi	r20, 0x7F	; 127
    1776:	57 e4       	ldi	r21, 0x47	; 71
    1778:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
    177c:	18 16       	cp	r1, r24
    177e:	0c f0       	brlt	.+2      	; 0x1782 <LCD_falling_edge+0x98>
    1780:	10 e0       	ldi	r17, 0x00	; 0
    1782:	11 23       	and	r17, r17
    1784:	61 f1       	breq	.+88     	; 0x17de <LCD_falling_edge+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1786:	69 81       	ldd	r22, Y+1	; 0x01
    1788:	7a 81       	ldd	r23, Y+2	; 0x02
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	9c 81       	ldd	r25, Y+4	; 0x04
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 e2       	ldi	r20, 0x20	; 32
    1794:	51 e4       	ldi	r21, 0x41	; 65
    1796:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	bc 01       	movw	r22, r24
    17a0:	cd 01       	movw	r24, r26
    17a2:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	9a 87       	std	Y+10, r25	; 0x0a
    17ac:	89 87       	std	Y+9, r24	; 0x09
    17ae:	12 c0       	rjmp	.+36     	; 0x17d4 <LCD_falling_edge+0xea>
    17b0:	89 e1       	ldi	r24, 0x19	; 25
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	9c 87       	std	Y+12, r25	; 0x0c
    17b6:	8b 87       	std	Y+11, r24	; 0x0b
    17b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    17ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    17bc:	8c 01       	movw	r16, r24
    17be:	c8 01       	movw	r24, r16
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	f1 f7       	brne	.-4      	; 0x17c0 <LCD_falling_edge+0xd6>
    17c4:	8c 01       	movw	r16, r24
    17c6:	1c 87       	std	Y+12, r17	; 0x0c
    17c8:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ca:	89 85       	ldd	r24, Y+9	; 0x09
    17cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	9a 87       	std	Y+10, r25	; 0x0a
    17d2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d4:	89 85       	ldd	r24, Y+9	; 0x09
    17d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	51 f7       	brne	.-44     	; 0x17b0 <LCD_falling_edge+0xc6>
    17dc:	17 c0       	rjmp	.+46     	; 0x180c <LCD_falling_edge+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17de:	6d 81       	ldd	r22, Y+5	; 0x05
    17e0:	7e 81       	ldd	r23, Y+6	; 0x06
    17e2:	8f 81       	ldd	r24, Y+7	; 0x07
    17e4:	98 85       	ldd	r25, Y+8	; 0x08
    17e6:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	9a 87       	std	Y+10, r25	; 0x0a
    17f0:	89 87       	std	Y+9, r24	; 0x09
    17f2:	89 85       	ldd	r24, Y+9	; 0x09
    17f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f6:	9e 87       	std	Y+14, r25	; 0x0e
    17f8:	8d 87       	std	Y+13, r24	; 0x0d
    17fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    17fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    17fe:	8c 01       	movw	r16, r24
    1800:	c8 01       	movw	r24, r16
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <LCD_falling_edge+0x118>
    1806:	8c 01       	movw	r16, r24
    1808:	1e 87       	std	Y+14, r17	; 0x0e
    180a:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(2);
	DIO_write(bitsport, EN, 0);
    180c:	81 e4       	ldi	r24, 0x41	; 65
    180e:	61 e0       	ldi	r22, 0x01	; 1
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	0e 94 30 01 	call	0x260	; 0x260 <DIO_write>
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	a0 e0       	ldi	r26, 0x00	; 0
    181c:	b0 e4       	ldi	r27, 0x40	; 64
    181e:	8f 87       	std	Y+15, r24	; 0x0f
    1820:	98 8b       	std	Y+16, r25	; 0x10
    1822:	a9 8b       	std	Y+17, r26	; 0x11
    1824:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1826:	6f 85       	ldd	r22, Y+15	; 0x0f
    1828:	78 89       	ldd	r23, Y+16	; 0x10
    182a:	89 89       	ldd	r24, Y+17	; 0x11
    182c:	9a 89       	ldd	r25, Y+18	; 0x12
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	4a e7       	ldi	r20, 0x7A	; 122
    1834:	53 e4       	ldi	r21, 0x43	; 67
    1836:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	8b 8b       	std	Y+19, r24	; 0x13
    1840:	9c 8b       	std	Y+20, r25	; 0x14
    1842:	ad 8b       	std	Y+21, r26	; 0x15
    1844:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1846:	11 e0       	ldi	r17, 0x01	; 1
    1848:	6b 89       	ldd	r22, Y+19	; 0x13
    184a:	7c 89       	ldd	r23, Y+20	; 0x14
    184c:	8d 89       	ldd	r24, Y+21	; 0x15
    184e:	9e 89       	ldd	r25, Y+22	; 0x16
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e8       	ldi	r20, 0x80	; 128
    1856:	5f e3       	ldi	r21, 0x3F	; 63
    1858:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__cmpsf2>
    185c:	88 23       	and	r24, r24
    185e:	0c f0       	brlt	.+2      	; 0x1862 <LCD_falling_edge+0x178>
    1860:	10 e0       	ldi	r17, 0x00	; 0
    1862:	11 23       	and	r17, r17
    1864:	29 f0       	breq	.+10     	; 0x1870 <LCD_falling_edge+0x186>
		__ticks = 1;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	98 8f       	std	Y+24, r25	; 0x18
    186c:	8f 8b       	std	Y+23, r24	; 0x17
    186e:	46 c0       	rjmp	.+140    	; 0x18fc <LCD_falling_edge+0x212>
	else if (__tmp > 65535)
    1870:	11 e0       	ldi	r17, 0x01	; 1
    1872:	6b 89       	ldd	r22, Y+19	; 0x13
    1874:	7c 89       	ldd	r23, Y+20	; 0x14
    1876:	8d 89       	ldd	r24, Y+21	; 0x15
    1878:	9e 89       	ldd	r25, Y+22	; 0x16
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	3f ef       	ldi	r19, 0xFF	; 255
    187e:	4f e7       	ldi	r20, 0x7F	; 127
    1880:	57 e4       	ldi	r21, 0x47	; 71
    1882:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
    1886:	18 16       	cp	r1, r24
    1888:	0c f0       	brlt	.+2      	; 0x188c <LCD_falling_edge+0x1a2>
    188a:	10 e0       	ldi	r17, 0x00	; 0
    188c:	11 23       	and	r17, r17
    188e:	61 f1       	breq	.+88     	; 0x18e8 <LCD_falling_edge+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1890:	6f 85       	ldd	r22, Y+15	; 0x0f
    1892:	78 89       	ldd	r23, Y+16	; 0x10
    1894:	89 89       	ldd	r24, Y+17	; 0x11
    1896:	9a 89       	ldd	r25, Y+18	; 0x12
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e2       	ldi	r20, 0x20	; 32
    189e:	51 e4       	ldi	r21, 0x41	; 65
    18a0:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	bc 01       	movw	r22, r24
    18aa:	cd 01       	movw	r24, r26
    18ac:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	98 8f       	std	Y+24, r25	; 0x18
    18b6:	8f 8b       	std	Y+23, r24	; 0x17
    18b8:	12 c0       	rjmp	.+36     	; 0x18de <LCD_falling_edge+0x1f4>
    18ba:	89 e1       	ldi	r24, 0x19	; 25
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	9a 8f       	std	Y+26, r25	; 0x1a
    18c0:	89 8f       	std	Y+25, r24	; 0x19
    18c2:	89 8d       	ldd	r24, Y+25	; 0x19
    18c4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18c6:	8c 01       	movw	r16, r24
    18c8:	c8 01       	movw	r24, r16
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <LCD_falling_edge+0x1e0>
    18ce:	8c 01       	movw	r16, r24
    18d0:	1a 8f       	std	Y+26, r17	; 0x1a
    18d2:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d4:	8f 89       	ldd	r24, Y+23	; 0x17
    18d6:	98 8d       	ldd	r25, Y+24	; 0x18
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	98 8f       	std	Y+24, r25	; 0x18
    18dc:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18de:	8f 89       	ldd	r24, Y+23	; 0x17
    18e0:	98 8d       	ldd	r25, Y+24	; 0x18
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	51 f7       	brne	.-44     	; 0x18ba <LCD_falling_edge+0x1d0>
    18e6:	17 c0       	rjmp	.+46     	; 0x1916 <LCD_falling_edge+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e8:	6b 89       	ldd	r22, Y+19	; 0x13
    18ea:	7c 89       	ldd	r23, Y+20	; 0x14
    18ec:	8d 89       	ldd	r24, Y+21	; 0x15
    18ee:	9e 89       	ldd	r25, Y+22	; 0x16
    18f0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	98 8f       	std	Y+24, r25	; 0x18
    18fa:	8f 8b       	std	Y+23, r24	; 0x17
    18fc:	8f 89       	ldd	r24, Y+23	; 0x17
    18fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1900:	9c 8f       	std	Y+28, r25	; 0x1c
    1902:	8b 8f       	std	Y+27, r24	; 0x1b
    1904:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1906:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1908:	8c 01       	movw	r16, r24
    190a:	c8 01       	movw	r24, r16
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	f1 f7       	brne	.-4      	; 0x190c <LCD_falling_edge+0x222>
    1910:	8c 01       	movw	r16, r24
    1912:	1c 8f       	std	Y+28, r17	; 0x1c
    1914:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(2);
}
    1916:	6c 96       	adiw	r28, 0x1c	; 28
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	df 91       	pop	r29
    1924:	cf 91       	pop	r28
    1926:	1f 91       	pop	r17
    1928:	0f 91       	pop	r16
    192a:	08 95       	ret

0000192c <LCD_send_cmd>:

void LCD_send_cmd(unsigned char cmd)
{
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	0f 92       	push	r0
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	89 83       	std	Y+1, r24	; 0x01
	DIO_write_port(portname, cmd);
    1938:	82 e4       	ldi	r24, 0x42	; 66
    193a:	69 81       	ldd	r22, Y+1	; 0x01
    193c:	0e 94 b6 02 	call	0x56c	; 0x56c <DIO_write_port>
	DIO_write(bitsport, RS, 0);
    1940:	81 e4       	ldi	r24, 0x41	; 65
    1942:	62 e0       	ldi	r22, 0x02	; 2
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	0e 94 30 01 	call	0x260	; 0x260 <DIO_write>
	LCD_falling_edge();
    194a:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_falling_edge>
}
    194e:	0f 90       	pop	r0
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	08 95       	ret

00001956 <LCD_send_char>:

void LCD_send_char(unsigned char data)
{
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	0f 92       	push	r0
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	89 83       	std	Y+1, r24	; 0x01
	DIO_write_port(portname, data);
    1962:	82 e4       	ldi	r24, 0x42	; 66
    1964:	69 81       	ldd	r22, Y+1	; 0x01
    1966:	0e 94 b6 02 	call	0x56c	; 0x56c <DIO_write_port>
	DIO_write(bitsport, RS, 1);
    196a:	81 e4       	ldi	r24, 0x41	; 65
    196c:	62 e0       	ldi	r22, 0x02	; 2
    196e:	41 e0       	ldi	r20, 0x01	; 1
    1970:	0e 94 30 01 	call	0x260	; 0x260 <DIO_write>
	LCD_falling_edge();
    1974:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_falling_edge>
}
    1978:	0f 90       	pop	r0
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	08 95       	ret

00001980 <LCD_send_string>:

void LCD_send_string (unsigned char *data)
{
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	00 d0       	rcall	.+0      	; 0x1986 <LCD_send_string+0x6>
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	9a 83       	std	Y+2, r25	; 0x02
    198c:	89 83       	std	Y+1, r24	; 0x01
	while ((*data) != '\0')
    198e:	0b c0       	rjmp	.+22     	; 0x19a6 <LCD_send_string+0x26>
	{
		LCD_send_char(*data);
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	9a 81       	ldd	r25, Y+2	; 0x02
    1994:	fc 01       	movw	r30, r24
    1996:	80 81       	ld	r24, Z
    1998:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LCD_send_char>
		data++;
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	9a 81       	ldd	r25, Y+2	; 0x02
    19a0:	01 96       	adiw	r24, 0x01	; 1
    19a2:	9a 83       	std	Y+2, r25	; 0x02
    19a4:	89 83       	std	Y+1, r24	; 0x01
	LCD_falling_edge();
}

void LCD_send_string (unsigned char *data)
{
	while ((*data) != '\0')
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	9a 81       	ldd	r25, Y+2	; 0x02
    19aa:	fc 01       	movw	r30, r24
    19ac:	80 81       	ld	r24, Z
    19ae:	88 23       	and	r24, r24
    19b0:	79 f7       	brne	.-34     	; 0x1990 <LCD_send_string+0x10>
	{
		LCD_send_char(*data);
		data++;
	}
	LCD_falling_edge();
    19b2:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_falling_edge>
}
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	08 95       	ret

000019c0 <LCD_movecursor>:

void LCD_movecursor(char row,char coloumn)
{
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	61 97       	sbiw	r28, 0x11	; 17
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	88 8b       	std	Y+16, r24	; 0x10
    19da:	69 8b       	std	Y+17, r22	; 0x11
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
    19dc:	88 89       	ldd	r24, Y+16	; 0x10
    19de:	83 30       	cpi	r24, 0x03	; 3
    19e0:	48 f4       	brcc	.+18     	; 0x19f4 <LCD_movecursor+0x34>
    19e2:	88 89       	ldd	r24, Y+16	; 0x10
    19e4:	88 23       	and	r24, r24
    19e6:	31 f0       	breq	.+12     	; 0x19f4 <LCD_movecursor+0x34>
    19e8:	89 89       	ldd	r24, Y+17	; 0x11
    19ea:	81 31       	cpi	r24, 0x11	; 17
    19ec:	18 f4       	brcc	.+6      	; 0x19f4 <LCD_movecursor+0x34>
    19ee:	89 89       	ldd	r24, Y+17	; 0x11
    19f0:	88 23       	and	r24, r24
    19f2:	19 f4       	brne	.+6      	; 0x19fa <LCD_movecursor+0x3a>
	{
		data=0x80;
    19f4:	80 e8       	ldi	r24, 0x80	; 128
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	0d c0       	rjmp	.+26     	; 0x1a14 <LCD_movecursor+0x54>
	}
	else if(row==1)
    19fa:	88 89       	ldd	r24, Y+16	; 0x10
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	21 f4       	brne	.+8      	; 0x1a08 <LCD_movecursor+0x48>
	{
		data=0x80+coloumn-1 ;
    1a00:	89 89       	ldd	r24, Y+17	; 0x11
    1a02:	81 58       	subi	r24, 0x81	; 129
    1a04:	89 83       	std	Y+1, r24	; 0x01
    1a06:	06 c0       	rjmp	.+12     	; 0x1a14 <LCD_movecursor+0x54>
	}
	else if (row==2)
    1a08:	88 89       	ldd	r24, Y+16	; 0x10
    1a0a:	82 30       	cpi	r24, 0x02	; 2
    1a0c:	19 f4       	brne	.+6      	; 0x1a14 <LCD_movecursor+0x54>
	{
		data=0xc0+coloumn-1;
    1a0e:	89 89       	ldd	r24, Y+17	; 0x11
    1a10:	81 54       	subi	r24, 0x41	; 65
    1a12:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_send_cmd(data);
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	0e 94 96 0c 	call	0x192c	; 0x192c <LCD_send_cmd>
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	a0 e8       	ldi	r26, 0x80	; 128
    1a20:	bf e3       	ldi	r27, 0x3F	; 63
    1a22:	8a 83       	std	Y+2, r24	; 0x02
    1a24:	9b 83       	std	Y+3, r25	; 0x03
    1a26:	ac 83       	std	Y+4, r26	; 0x04
    1a28:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a2a:	6a 81       	ldd	r22, Y+2	; 0x02
    1a2c:	7b 81       	ldd	r23, Y+3	; 0x03
    1a2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a30:	9d 81       	ldd	r25, Y+5	; 0x05
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	4a e7       	ldi	r20, 0x7A	; 122
    1a38:	53 e4       	ldi	r21, 0x43	; 67
    1a3a:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	8e 83       	std	Y+6, r24	; 0x06
    1a44:	9f 83       	std	Y+7, r25	; 0x07
    1a46:	a8 87       	std	Y+8, r26	; 0x08
    1a48:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1a4a:	11 e0       	ldi	r17, 0x01	; 1
    1a4c:	6e 81       	ldd	r22, Y+6	; 0x06
    1a4e:	7f 81       	ldd	r23, Y+7	; 0x07
    1a50:	88 85       	ldd	r24, Y+8	; 0x08
    1a52:	99 85       	ldd	r25, Y+9	; 0x09
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e8       	ldi	r20, 0x80	; 128
    1a5a:	5f e3       	ldi	r21, 0x3F	; 63
    1a5c:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__cmpsf2>
    1a60:	88 23       	and	r24, r24
    1a62:	0c f0       	brlt	.+2      	; 0x1a66 <LCD_movecursor+0xa6>
    1a64:	10 e0       	ldi	r17, 0x00	; 0
    1a66:	11 23       	and	r17, r17
    1a68:	29 f0       	breq	.+10     	; 0x1a74 <LCD_movecursor+0xb4>
		__ticks = 1;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	9b 87       	std	Y+11, r25	; 0x0b
    1a70:	8a 87       	std	Y+10, r24	; 0x0a
    1a72:	46 c0       	rjmp	.+140    	; 0x1b00 <LCD_movecursor+0x140>
	else if (__tmp > 65535)
    1a74:	11 e0       	ldi	r17, 0x01	; 1
    1a76:	6e 81       	ldd	r22, Y+6	; 0x06
    1a78:	7f 81       	ldd	r23, Y+7	; 0x07
    1a7a:	88 85       	ldd	r24, Y+8	; 0x08
    1a7c:	99 85       	ldd	r25, Y+9	; 0x09
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	3f ef       	ldi	r19, 0xFF	; 255
    1a82:	4f e7       	ldi	r20, 0x7F	; 127
    1a84:	57 e4       	ldi	r21, 0x47	; 71
    1a86:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
    1a8a:	18 16       	cp	r1, r24
    1a8c:	0c f0       	brlt	.+2      	; 0x1a90 <LCD_movecursor+0xd0>
    1a8e:	10 e0       	ldi	r17, 0x00	; 0
    1a90:	11 23       	and	r17, r17
    1a92:	61 f1       	breq	.+88     	; 0x1aec <LCD_movecursor+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a94:	6a 81       	ldd	r22, Y+2	; 0x02
    1a96:	7b 81       	ldd	r23, Y+3	; 0x03
    1a98:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e2       	ldi	r20, 0x20	; 32
    1aa2:	51 e4       	ldi	r21, 0x41	; 65
    1aa4:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	bc 01       	movw	r22, r24
    1aae:	cd 01       	movw	r24, r26
    1ab0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	9b 87       	std	Y+11, r25	; 0x0b
    1aba:	8a 87       	std	Y+10, r24	; 0x0a
    1abc:	12 c0       	rjmp	.+36     	; 0x1ae2 <LCD_movecursor+0x122>
    1abe:	89 e1       	ldi	r24, 0x19	; 25
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	9d 87       	std	Y+13, r25	; 0x0d
    1ac4:	8c 87       	std	Y+12, r24	; 0x0c
    1ac6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ac8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1aca:	8c 01       	movw	r16, r24
    1acc:	c8 01       	movw	r24, r16
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <LCD_movecursor+0x10e>
    1ad2:	8c 01       	movw	r16, r24
    1ad4:	1d 87       	std	Y+13, r17	; 0x0d
    1ad6:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ada:	9b 85       	ldd	r25, Y+11	; 0x0b
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	9b 87       	std	Y+11, r25	; 0x0b
    1ae0:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ae4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ae6:	00 97       	sbiw	r24, 0x00	; 0
    1ae8:	51 f7       	brne	.-44     	; 0x1abe <LCD_movecursor+0xfe>
    1aea:	17 c0       	rjmp	.+46     	; 0x1b1a <LCD_movecursor+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aec:	6e 81       	ldd	r22, Y+6	; 0x06
    1aee:	7f 81       	ldd	r23, Y+7	; 0x07
    1af0:	88 85       	ldd	r24, Y+8	; 0x08
    1af2:	99 85       	ldd	r25, Y+9	; 0x09
    1af4:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	9b 87       	std	Y+11, r25	; 0x0b
    1afe:	8a 87       	std	Y+10, r24	; 0x0a
    1b00:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b02:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b04:	9f 87       	std	Y+15, r25	; 0x0f
    1b06:	8e 87       	std	Y+14, r24	; 0x0e
    1b08:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b0a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b0c:	8c 01       	movw	r16, r24
    1b0e:	c8 01       	movw	r24, r16
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	f1 f7       	brne	.-4      	; 0x1b10 <LCD_movecursor+0x150>
    1b14:	8c 01       	movw	r16, r24
    1b16:	1f 87       	std	Y+15, r17	; 0x0f
    1b18:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(1);
}
    1b1a:	61 96       	adiw	r28, 0x11	; 17
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	1f 91       	pop	r17
    1b2c:	0f 91       	pop	r16
    1b2e:	08 95       	ret

00001b30 <UART_vInit>:
#include <util/delay.h>
#include <avr/io.h>
#include "macros.h"

void UART_vInit(unsigned long baud)
{
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <UART_vInit+0x6>
    1b36:	00 d0       	rcall	.+0      	; 0x1b38 <UART_vInit+0x8>
    1b38:	00 d0       	rcall	.+0      	; 0x1b3a <UART_vInit+0xa>
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	6b 83       	std	Y+3, r22	; 0x03
    1b40:	7c 83       	std	Y+4, r23	; 0x04
    1b42:	8d 83       	std	Y+5, r24	; 0x05
    1b44:	9e 83       	std	Y+6, r25	; 0x06
	/*1 - Choose baud rate that will be used by sender and receiver by writing to UBRRL/UBRRH*/
	unsigned short UBRR ;
	UBRR=(F_CPU/(16*baud))-1 ;
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4a:	ad 81       	ldd	r26, Y+5	; 0x05
    1b4c:	be 81       	ldd	r27, Y+6	; 0x06
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	aa 1f       	adc	r26, r26
    1b54:	bb 1f       	adc	r27, r27
    1b56:	88 0f       	add	r24, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	aa 1f       	adc	r26, r26
    1b5c:	bb 1f       	adc	r27, r27
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	aa 1f       	adc	r26, r26
    1b64:	bb 1f       	adc	r27, r27
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	aa 1f       	adc	r26, r26
    1b6c:	bb 1f       	adc	r27, r27
    1b6e:	9c 01       	movw	r18, r24
    1b70:	ad 01       	movw	r20, r26
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	92 e1       	ldi	r25, 0x12	; 18
    1b76:	aa e7       	ldi	r26, 0x7A	; 122
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	bc 01       	movw	r22, r24
    1b7c:	cd 01       	movw	r24, r26
    1b7e:	0e 94 28 11 	call	0x2250	; 0x2250 <__udivmodsi4>
    1b82:	da 01       	movw	r26, r20
    1b84:	c9 01       	movw	r24, r18
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	9a 83       	std	Y+2, r25	; 0x02
    1b8a:	89 83       	std	Y+1, r24	; 0x01
	UBRRH=(unsigned char)(UBRR>>8);
    1b8c:	80 e4       	ldi	r24, 0x40	; 64
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	29 81       	ldd	r18, Y+1	; 0x01
    1b92:	3a 81       	ldd	r19, Y+2	; 0x02
    1b94:	23 2f       	mov	r18, r19
    1b96:	33 27       	eor	r19, r19
    1b98:	fc 01       	movw	r30, r24
    1b9a:	20 83       	st	Z, r18
	UBRRL=(unsigned char)UBRR;
    1b9c:	89 e2       	ldi	r24, 0x29	; 41
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	29 81       	ldd	r18, Y+1	; 0x01
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	20 83       	st	Z, r18
	/*2 - Enable USART Sender & Receiver*/
	SET_BIT(UCSRB,TXEN);
    1ba6:	8a e2       	ldi	r24, 0x2A	; 42
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	2a e2       	ldi	r18, 0x2A	; 42
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	f9 01       	movw	r30, r18
    1bb0:	20 81       	ld	r18, Z
    1bb2:	28 60       	ori	r18, 0x08	; 8
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	20 83       	st	Z, r18
	SET_BIT(UCSRB,RXEN);
    1bb8:	8a e2       	ldi	r24, 0x2A	; 42
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	2a e2       	ldi	r18, 0x2A	; 42
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	f9 01       	movw	r30, r18
    1bc2:	20 81       	ld	r18, Z
    1bc4:	20 61       	ori	r18, 0x10	; 16
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	20 83       	st	Z, r18
	/*3 - Choose number of data bits to be sent,parity and stop bits from UCSRC
	, We will work with 8 bits data,1 stop bit and no parity bits*/
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
    1bca:	80 e4       	ldi	r24, 0x40	; 64
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	26 e8       	ldi	r18, 0x86	; 134
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	20 83       	st	Z, r18
}
    1bd4:	26 96       	adiw	r28, 0x06	; 6
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	de bf       	out	0x3e, r29	; 62
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	cd bf       	out	0x3d, r28	; 61
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	08 95       	ret

00001be6 <UART_vSendData>:

void UART_vSendData(char data)
{
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	0f 92       	push	r0
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	89 83       	std	Y+1, r24	; 0x01
	/*Wait for UDR transmit buffer to be empty*/
	while(READ_BIT(UCSRA,UDRE)==0);
    1bf2:	00 00       	nop
    1bf4:	8b e2       	ldi	r24, 0x2B	; 43
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	80 81       	ld	r24, Z
    1bfc:	88 2f       	mov	r24, r24
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	80 72       	andi	r24, 0x20	; 32
    1c02:	90 70       	andi	r25, 0x00	; 0
    1c04:	95 95       	asr	r25
    1c06:	87 95       	ror	r24
    1c08:	95 95       	asr	r25
    1c0a:	87 95       	ror	r24
    1c0c:	95 95       	asr	r25
    1c0e:	87 95       	ror	r24
    1c10:	95 95       	asr	r25
    1c12:	87 95       	ror	r24
    1c14:	95 95       	asr	r25
    1c16:	87 95       	ror	r24
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	61 f3       	breq	.-40     	; 0x1bf4 <UART_vSendData+0xe>
	/*Put data to UDR transmit buffer transmit*/
	UDR=data ;
    1c1c:	8c e2       	ldi	r24, 0x2C	; 44
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	29 81       	ldd	r18, Y+1	; 0x01
    1c22:	fc 01       	movw	r30, r24
    1c24:	20 83       	st	Z, r18
}
    1c26:	0f 90       	pop	r0
    1c28:	df 91       	pop	r29
    1c2a:	cf 91       	pop	r28
    1c2c:	08 95       	ret

00001c2e <UART_u8ReceiveData>:

char UART_u8ReceiveData(void)
{
    1c2e:	cf 93       	push	r28
    1c30:	df 93       	push	r29
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
	/*Wait for UDR receive buffer to be filled with data*/
	while(READ_BIT(UCSRA,RXC)==0);
    1c36:	00 00       	nop
    1c38:	8b e2       	ldi	r24, 0x2B	; 43
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	80 81       	ld	r24, Z
    1c40:	88 1f       	adc	r24, r24
    1c42:	88 27       	eor	r24, r24
    1c44:	88 1f       	adc	r24, r24
    1c46:	88 2f       	mov	r24, r24
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	90 70       	andi	r25, 0x00	; 0
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	a1 f3       	breq	.-24     	; 0x1c38 <UART_u8ReceiveData+0xa>
	/*Receive data from UDR receive buffer*/
	return UDR ;
    1c50:	8c e2       	ldi	r24, 0x2C	; 44
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	fc 01       	movw	r30, r24
    1c56:	80 81       	ld	r24, Z
}
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	08 95       	ret

00001c5e <UART_vSendstring>:

void UART_vSendstring( char *ptr)
{
    1c5e:	0f 93       	push	r16
    1c60:	1f 93       	push	r17
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	60 97       	sbiw	r28, 0x10	; 16
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	f8 94       	cli
    1c70:	de bf       	out	0x3e, r29	; 62
    1c72:	0f be       	out	0x3f, r0	; 63
    1c74:	cd bf       	out	0x3d, r28	; 61
    1c76:	98 8b       	std	Y+16, r25	; 0x10
    1c78:	8f 87       	std	Y+15, r24	; 0x0f
	while(*ptr!=0)
    1c7a:	8b c0       	rjmp	.+278    	; 0x1d92 <UART_vSendstring+0x134>
	{
		UART_vSendData(*ptr);
    1c7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c7e:	98 89       	ldd	r25, Y+16	; 0x10
    1c80:	fc 01       	movw	r30, r24
    1c82:	80 81       	ld	r24, Z
    1c84:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <UART_vSendData>
		ptr++;
    1c88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c8a:	98 89       	ldd	r25, Y+16	; 0x10
    1c8c:	01 96       	adiw	r24, 0x01	; 1
    1c8e:	98 8b       	std	Y+16, r25	; 0x10
    1c90:	8f 87       	std	Y+15, r24	; 0x0f
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a8 ec       	ldi	r26, 0xC8	; 200
    1c98:	b2 e4       	ldi	r27, 0x42	; 66
    1c9a:	89 83       	std	Y+1, r24	; 0x01
    1c9c:	9a 83       	std	Y+2, r25	; 0x02
    1c9e:	ab 83       	std	Y+3, r26	; 0x03
    1ca0:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ca2:	69 81       	ldd	r22, Y+1	; 0x01
    1ca4:	7a 81       	ldd	r23, Y+2	; 0x02
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	4a ef       	ldi	r20, 0xFA	; 250
    1cb0:	54 e4       	ldi	r21, 0x44	; 68
    1cb2:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	8d 83       	std	Y+5, r24	; 0x05
    1cbc:	9e 83       	std	Y+6, r25	; 0x06
    1cbe:	af 83       	std	Y+7, r26	; 0x07
    1cc0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1cc2:	11 e0       	ldi	r17, 0x01	; 1
    1cc4:	6d 81       	ldd	r22, Y+5	; 0x05
    1cc6:	7e 81       	ldd	r23, Y+6	; 0x06
    1cc8:	8f 81       	ldd	r24, Y+7	; 0x07
    1cca:	98 85       	ldd	r25, Y+8	; 0x08
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e8       	ldi	r20, 0x80	; 128
    1cd2:	5f e3       	ldi	r21, 0x3F	; 63
    1cd4:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__cmpsf2>
    1cd8:	88 23       	and	r24, r24
    1cda:	0c f0       	brlt	.+2      	; 0x1cde <UART_vSendstring+0x80>
    1cdc:	10 e0       	ldi	r17, 0x00	; 0
    1cde:	11 23       	and	r17, r17
    1ce0:	29 f0       	breq	.+10     	; 0x1cec <UART_vSendstring+0x8e>
		__ticks = 1;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	9a 87       	std	Y+10, r25	; 0x0a
    1ce8:	89 87       	std	Y+9, r24	; 0x09
    1cea:	46 c0       	rjmp	.+140    	; 0x1d78 <UART_vSendstring+0x11a>
	else if (__tmp > 65535)
    1cec:	11 e0       	ldi	r17, 0x01	; 1
    1cee:	6d 81       	ldd	r22, Y+5	; 0x05
    1cf0:	7e 81       	ldd	r23, Y+6	; 0x06
    1cf2:	8f 81       	ldd	r24, Y+7	; 0x07
    1cf4:	98 85       	ldd	r25, Y+8	; 0x08
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	3f ef       	ldi	r19, 0xFF	; 255
    1cfa:	4f e7       	ldi	r20, 0x7F	; 127
    1cfc:	57 e4       	ldi	r21, 0x47	; 71
    1cfe:	0e 94 8f 10 	call	0x211e	; 0x211e <__gesf2>
    1d02:	18 16       	cp	r1, r24
    1d04:	0c f0       	brlt	.+2      	; 0x1d08 <UART_vSendstring+0xaa>
    1d06:	10 e0       	ldi	r17, 0x00	; 0
    1d08:	11 23       	and	r17, r17
    1d0a:	61 f1       	breq	.+88     	; 0x1d64 <UART_vSendstring+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0c:	69 81       	ldd	r22, Y+1	; 0x01
    1d0e:	7a 81       	ldd	r23, Y+2	; 0x02
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	9c 81       	ldd	r25, Y+4	; 0x04
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e2       	ldi	r20, 0x20	; 32
    1d1a:	51 e4       	ldi	r21, 0x41	; 65
    1d1c:	0e 94 93 10 	call	0x2126	; 0x2126 <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	bc 01       	movw	r22, r24
    1d26:	cd 01       	movw	r24, r26
    1d28:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	9a 87       	std	Y+10, r25	; 0x0a
    1d32:	89 87       	std	Y+9, r24	; 0x09
    1d34:	12 c0       	rjmp	.+36     	; 0x1d5a <UART_vSendstring+0xfc>
    1d36:	88 ec       	ldi	r24, 0xC8	; 200
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	9c 87       	std	Y+12, r25	; 0x0c
    1d3c:	8b 87       	std	Y+11, r24	; 0x0b
    1d3e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d40:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d42:	8c 01       	movw	r16, r24
    1d44:	c8 01       	movw	r24, r16
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	f1 f7       	brne	.-4      	; 0x1d46 <UART_vSendstring+0xe8>
    1d4a:	8c 01       	movw	r16, r24
    1d4c:	1c 87       	std	Y+12, r17	; 0x0c
    1d4e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d50:	89 85       	ldd	r24, Y+9	; 0x09
    1d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	9a 87       	std	Y+10, r25	; 0x0a
    1d58:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5a:	89 85       	ldd	r24, Y+9	; 0x09
    1d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5e:	00 97       	sbiw	r24, 0x00	; 0
    1d60:	51 f7       	brne	.-44     	; 0x1d36 <UART_vSendstring+0xd8>
    1d62:	17 c0       	rjmp	.+46     	; 0x1d92 <UART_vSendstring+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d64:	6d 81       	ldd	r22, Y+5	; 0x05
    1d66:	7e 81       	ldd	r23, Y+6	; 0x06
    1d68:	8f 81       	ldd	r24, Y+7	; 0x07
    1d6a:	98 85       	ldd	r25, Y+8	; 0x08
    1d6c:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	9a 87       	std	Y+10, r25	; 0x0a
    1d76:	89 87       	std	Y+9, r24	; 0x09
    1d78:	89 85       	ldd	r24, Y+9	; 0x09
    1d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7c:	9e 87       	std	Y+14, r25	; 0x0e
    1d7e:	8d 87       	std	Y+13, r24	; 0x0d
    1d80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d84:	8c 01       	movw	r16, r24
    1d86:	f8 01       	movw	r30, r16
    1d88:	31 97       	sbiw	r30, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <UART_vSendstring+0x12a>
    1d8c:	8f 01       	movw	r16, r30
    1d8e:	1e 87       	std	Y+14, r17	; 0x0e
    1d90:	0d 87       	std	Y+13, r16	; 0x0d
	return UDR ;
}

void UART_vSendstring( char *ptr)
{
	while(*ptr!=0)
    1d92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d94:	98 89       	ldd	r25, Y+16	; 0x10
    1d96:	fc 01       	movw	r30, r24
    1d98:	80 81       	ld	r24, Z
    1d9a:	88 23       	and	r24, r24
    1d9c:	09 f0       	breq	.+2      	; 0x1da0 <UART_vSendstring+0x142>
    1d9e:	6e cf       	rjmp	.-292    	; 0x1c7c <UART_vSendstring+0x1e>
	{
		UART_vSendData(*ptr);
		ptr++;
		_delay_ms(100);
	}
}
    1da0:	60 96       	adiw	r28, 0x10	; 16
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	cd bf       	out	0x3d, r28	; 61
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	1f 91       	pop	r17
    1db2:	0f 91       	pop	r16
    1db4:	08 95       	ret

00001db6 <__subsf3>:
    1db6:	50 58       	subi	r21, 0x80	; 128

00001db8 <__addsf3>:
    1db8:	bb 27       	eor	r27, r27
    1dba:	aa 27       	eor	r26, r26
    1dbc:	0e d0       	rcall	.+28     	; 0x1dda <__addsf3x>
    1dbe:	75 c1       	rjmp	.+746    	; 0x20aa <__fp_round>
    1dc0:	66 d1       	rcall	.+716    	; 0x208e <__fp_pscA>
    1dc2:	30 f0       	brcs	.+12     	; 0x1dd0 <__addsf3+0x18>
    1dc4:	6b d1       	rcall	.+726    	; 0x209c <__fp_pscB>
    1dc6:	20 f0       	brcs	.+8      	; 0x1dd0 <__addsf3+0x18>
    1dc8:	31 f4       	brne	.+12     	; 0x1dd6 <__addsf3+0x1e>
    1dca:	9f 3f       	cpi	r25, 0xFF	; 255
    1dcc:	11 f4       	brne	.+4      	; 0x1dd2 <__addsf3+0x1a>
    1dce:	1e f4       	brtc	.+6      	; 0x1dd6 <__addsf3+0x1e>
    1dd0:	5b c1       	rjmp	.+694    	; 0x2088 <__fp_nan>
    1dd2:	0e f4       	brtc	.+2      	; 0x1dd6 <__addsf3+0x1e>
    1dd4:	e0 95       	com	r30
    1dd6:	e7 fb       	bst	r30, 7
    1dd8:	51 c1       	rjmp	.+674    	; 0x207c <__fp_inf>

00001dda <__addsf3x>:
    1dda:	e9 2f       	mov	r30, r25
    1ddc:	77 d1       	rcall	.+750    	; 0x20cc <__fp_split3>
    1dde:	80 f3       	brcs	.-32     	; 0x1dc0 <__addsf3+0x8>
    1de0:	ba 17       	cp	r27, r26
    1de2:	62 07       	cpc	r22, r18
    1de4:	73 07       	cpc	r23, r19
    1de6:	84 07       	cpc	r24, r20
    1de8:	95 07       	cpc	r25, r21
    1dea:	18 f0       	brcs	.+6      	; 0x1df2 <__addsf3x+0x18>
    1dec:	71 f4       	brne	.+28     	; 0x1e0a <__addsf3x+0x30>
    1dee:	9e f5       	brtc	.+102    	; 0x1e56 <__addsf3x+0x7c>
    1df0:	8f c1       	rjmp	.+798    	; 0x2110 <__fp_zero>
    1df2:	0e f4       	brtc	.+2      	; 0x1df6 <__addsf3x+0x1c>
    1df4:	e0 95       	com	r30
    1df6:	0b 2e       	mov	r0, r27
    1df8:	ba 2f       	mov	r27, r26
    1dfa:	a0 2d       	mov	r26, r0
    1dfc:	0b 01       	movw	r0, r22
    1dfe:	b9 01       	movw	r22, r18
    1e00:	90 01       	movw	r18, r0
    1e02:	0c 01       	movw	r0, r24
    1e04:	ca 01       	movw	r24, r20
    1e06:	a0 01       	movw	r20, r0
    1e08:	11 24       	eor	r1, r1
    1e0a:	ff 27       	eor	r31, r31
    1e0c:	59 1b       	sub	r21, r25
    1e0e:	99 f0       	breq	.+38     	; 0x1e36 <__addsf3x+0x5c>
    1e10:	59 3f       	cpi	r21, 0xF9	; 249
    1e12:	50 f4       	brcc	.+20     	; 0x1e28 <__addsf3x+0x4e>
    1e14:	50 3e       	cpi	r21, 0xE0	; 224
    1e16:	68 f1       	brcs	.+90     	; 0x1e72 <__addsf3x+0x98>
    1e18:	1a 16       	cp	r1, r26
    1e1a:	f0 40       	sbci	r31, 0x00	; 0
    1e1c:	a2 2f       	mov	r26, r18
    1e1e:	23 2f       	mov	r18, r19
    1e20:	34 2f       	mov	r19, r20
    1e22:	44 27       	eor	r20, r20
    1e24:	58 5f       	subi	r21, 0xF8	; 248
    1e26:	f3 cf       	rjmp	.-26     	; 0x1e0e <__addsf3x+0x34>
    1e28:	46 95       	lsr	r20
    1e2a:	37 95       	ror	r19
    1e2c:	27 95       	ror	r18
    1e2e:	a7 95       	ror	r26
    1e30:	f0 40       	sbci	r31, 0x00	; 0
    1e32:	53 95       	inc	r21
    1e34:	c9 f7       	brne	.-14     	; 0x1e28 <__addsf3x+0x4e>
    1e36:	7e f4       	brtc	.+30     	; 0x1e56 <__addsf3x+0x7c>
    1e38:	1f 16       	cp	r1, r31
    1e3a:	ba 0b       	sbc	r27, r26
    1e3c:	62 0b       	sbc	r22, r18
    1e3e:	73 0b       	sbc	r23, r19
    1e40:	84 0b       	sbc	r24, r20
    1e42:	ba f0       	brmi	.+46     	; 0x1e72 <__addsf3x+0x98>
    1e44:	91 50       	subi	r25, 0x01	; 1
    1e46:	a1 f0       	breq	.+40     	; 0x1e70 <__addsf3x+0x96>
    1e48:	ff 0f       	add	r31, r31
    1e4a:	bb 1f       	adc	r27, r27
    1e4c:	66 1f       	adc	r22, r22
    1e4e:	77 1f       	adc	r23, r23
    1e50:	88 1f       	adc	r24, r24
    1e52:	c2 f7       	brpl	.-16     	; 0x1e44 <__addsf3x+0x6a>
    1e54:	0e c0       	rjmp	.+28     	; 0x1e72 <__addsf3x+0x98>
    1e56:	ba 0f       	add	r27, r26
    1e58:	62 1f       	adc	r22, r18
    1e5a:	73 1f       	adc	r23, r19
    1e5c:	84 1f       	adc	r24, r20
    1e5e:	48 f4       	brcc	.+18     	; 0x1e72 <__addsf3x+0x98>
    1e60:	87 95       	ror	r24
    1e62:	77 95       	ror	r23
    1e64:	67 95       	ror	r22
    1e66:	b7 95       	ror	r27
    1e68:	f7 95       	ror	r31
    1e6a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e6c:	08 f0       	brcs	.+2      	; 0x1e70 <__addsf3x+0x96>
    1e6e:	b3 cf       	rjmp	.-154    	; 0x1dd6 <__addsf3+0x1e>
    1e70:	93 95       	inc	r25
    1e72:	88 0f       	add	r24, r24
    1e74:	08 f0       	brcs	.+2      	; 0x1e78 <__addsf3x+0x9e>
    1e76:	99 27       	eor	r25, r25
    1e78:	ee 0f       	add	r30, r30
    1e7a:	97 95       	ror	r25
    1e7c:	87 95       	ror	r24
    1e7e:	08 95       	ret

00001e80 <__cmpsf2>:
    1e80:	d9 d0       	rcall	.+434    	; 0x2034 <__fp_cmp>
    1e82:	08 f4       	brcc	.+2      	; 0x1e86 <__cmpsf2+0x6>
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	08 95       	ret

00001e88 <__divsf3>:
    1e88:	0c d0       	rcall	.+24     	; 0x1ea2 <__divsf3x>
    1e8a:	0f c1       	rjmp	.+542    	; 0x20aa <__fp_round>
    1e8c:	07 d1       	rcall	.+526    	; 0x209c <__fp_pscB>
    1e8e:	40 f0       	brcs	.+16     	; 0x1ea0 <__divsf3+0x18>
    1e90:	fe d0       	rcall	.+508    	; 0x208e <__fp_pscA>
    1e92:	30 f0       	brcs	.+12     	; 0x1ea0 <__divsf3+0x18>
    1e94:	21 f4       	brne	.+8      	; 0x1e9e <__divsf3+0x16>
    1e96:	5f 3f       	cpi	r21, 0xFF	; 255
    1e98:	19 f0       	breq	.+6      	; 0x1ea0 <__divsf3+0x18>
    1e9a:	f0 c0       	rjmp	.+480    	; 0x207c <__fp_inf>
    1e9c:	51 11       	cpse	r21, r1
    1e9e:	39 c1       	rjmp	.+626    	; 0x2112 <__fp_szero>
    1ea0:	f3 c0       	rjmp	.+486    	; 0x2088 <__fp_nan>

00001ea2 <__divsf3x>:
    1ea2:	14 d1       	rcall	.+552    	; 0x20cc <__fp_split3>
    1ea4:	98 f3       	brcs	.-26     	; 0x1e8c <__divsf3+0x4>

00001ea6 <__divsf3_pse>:
    1ea6:	99 23       	and	r25, r25
    1ea8:	c9 f3       	breq	.-14     	; 0x1e9c <__divsf3+0x14>
    1eaa:	55 23       	and	r21, r21
    1eac:	b1 f3       	breq	.-20     	; 0x1e9a <__divsf3+0x12>
    1eae:	95 1b       	sub	r25, r21
    1eb0:	55 0b       	sbc	r21, r21
    1eb2:	bb 27       	eor	r27, r27
    1eb4:	aa 27       	eor	r26, r26
    1eb6:	62 17       	cp	r22, r18
    1eb8:	73 07       	cpc	r23, r19
    1eba:	84 07       	cpc	r24, r20
    1ebc:	38 f0       	brcs	.+14     	; 0x1ecc <__divsf3_pse+0x26>
    1ebe:	9f 5f       	subi	r25, 0xFF	; 255
    1ec0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec2:	22 0f       	add	r18, r18
    1ec4:	33 1f       	adc	r19, r19
    1ec6:	44 1f       	adc	r20, r20
    1ec8:	aa 1f       	adc	r26, r26
    1eca:	a9 f3       	breq	.-22     	; 0x1eb6 <__divsf3_pse+0x10>
    1ecc:	33 d0       	rcall	.+102    	; 0x1f34 <__divsf3_pse+0x8e>
    1ece:	0e 2e       	mov	r0, r30
    1ed0:	3a f0       	brmi	.+14     	; 0x1ee0 <__divsf3_pse+0x3a>
    1ed2:	e0 e8       	ldi	r30, 0x80	; 128
    1ed4:	30 d0       	rcall	.+96     	; 0x1f36 <__divsf3_pse+0x90>
    1ed6:	91 50       	subi	r25, 0x01	; 1
    1ed8:	50 40       	sbci	r21, 0x00	; 0
    1eda:	e6 95       	lsr	r30
    1edc:	00 1c       	adc	r0, r0
    1ede:	ca f7       	brpl	.-14     	; 0x1ed2 <__divsf3_pse+0x2c>
    1ee0:	29 d0       	rcall	.+82     	; 0x1f34 <__divsf3_pse+0x8e>
    1ee2:	fe 2f       	mov	r31, r30
    1ee4:	27 d0       	rcall	.+78     	; 0x1f34 <__divsf3_pse+0x8e>
    1ee6:	66 0f       	add	r22, r22
    1ee8:	77 1f       	adc	r23, r23
    1eea:	88 1f       	adc	r24, r24
    1eec:	bb 1f       	adc	r27, r27
    1eee:	26 17       	cp	r18, r22
    1ef0:	37 07       	cpc	r19, r23
    1ef2:	48 07       	cpc	r20, r24
    1ef4:	ab 07       	cpc	r26, r27
    1ef6:	b0 e8       	ldi	r27, 0x80	; 128
    1ef8:	09 f0       	breq	.+2      	; 0x1efc <__divsf3_pse+0x56>
    1efa:	bb 0b       	sbc	r27, r27
    1efc:	80 2d       	mov	r24, r0
    1efe:	bf 01       	movw	r22, r30
    1f00:	ff 27       	eor	r31, r31
    1f02:	93 58       	subi	r25, 0x83	; 131
    1f04:	5f 4f       	sbci	r21, 0xFF	; 255
    1f06:	2a f0       	brmi	.+10     	; 0x1f12 <__divsf3_pse+0x6c>
    1f08:	9e 3f       	cpi	r25, 0xFE	; 254
    1f0a:	51 05       	cpc	r21, r1
    1f0c:	68 f0       	brcs	.+26     	; 0x1f28 <__divsf3_pse+0x82>
    1f0e:	b6 c0       	rjmp	.+364    	; 0x207c <__fp_inf>
    1f10:	00 c1       	rjmp	.+512    	; 0x2112 <__fp_szero>
    1f12:	5f 3f       	cpi	r21, 0xFF	; 255
    1f14:	ec f3       	brlt	.-6      	; 0x1f10 <__divsf3_pse+0x6a>
    1f16:	98 3e       	cpi	r25, 0xE8	; 232
    1f18:	dc f3       	brlt	.-10     	; 0x1f10 <__divsf3_pse+0x6a>
    1f1a:	86 95       	lsr	r24
    1f1c:	77 95       	ror	r23
    1f1e:	67 95       	ror	r22
    1f20:	b7 95       	ror	r27
    1f22:	f7 95       	ror	r31
    1f24:	9f 5f       	subi	r25, 0xFF	; 255
    1f26:	c9 f7       	brne	.-14     	; 0x1f1a <__divsf3_pse+0x74>
    1f28:	88 0f       	add	r24, r24
    1f2a:	91 1d       	adc	r25, r1
    1f2c:	96 95       	lsr	r25
    1f2e:	87 95       	ror	r24
    1f30:	97 f9       	bld	r25, 7
    1f32:	08 95       	ret
    1f34:	e1 e0       	ldi	r30, 0x01	; 1
    1f36:	66 0f       	add	r22, r22
    1f38:	77 1f       	adc	r23, r23
    1f3a:	88 1f       	adc	r24, r24
    1f3c:	bb 1f       	adc	r27, r27
    1f3e:	62 17       	cp	r22, r18
    1f40:	73 07       	cpc	r23, r19
    1f42:	84 07       	cpc	r24, r20
    1f44:	ba 07       	cpc	r27, r26
    1f46:	20 f0       	brcs	.+8      	; 0x1f50 <__divsf3_pse+0xaa>
    1f48:	62 1b       	sub	r22, r18
    1f4a:	73 0b       	sbc	r23, r19
    1f4c:	84 0b       	sbc	r24, r20
    1f4e:	ba 0b       	sbc	r27, r26
    1f50:	ee 1f       	adc	r30, r30
    1f52:	88 f7       	brcc	.-30     	; 0x1f36 <__divsf3_pse+0x90>
    1f54:	e0 95       	com	r30
    1f56:	08 95       	ret

00001f58 <__fixsfsi>:
    1f58:	04 d0       	rcall	.+8      	; 0x1f62 <__fixunssfsi>
    1f5a:	68 94       	set
    1f5c:	b1 11       	cpse	r27, r1
    1f5e:	d9 c0       	rjmp	.+434    	; 0x2112 <__fp_szero>
    1f60:	08 95       	ret

00001f62 <__fixunssfsi>:
    1f62:	bc d0       	rcall	.+376    	; 0x20dc <__fp_splitA>
    1f64:	88 f0       	brcs	.+34     	; 0x1f88 <__fixunssfsi+0x26>
    1f66:	9f 57       	subi	r25, 0x7F	; 127
    1f68:	90 f0       	brcs	.+36     	; 0x1f8e <__fixunssfsi+0x2c>
    1f6a:	b9 2f       	mov	r27, r25
    1f6c:	99 27       	eor	r25, r25
    1f6e:	b7 51       	subi	r27, 0x17	; 23
    1f70:	a0 f0       	brcs	.+40     	; 0x1f9a <__fixunssfsi+0x38>
    1f72:	d1 f0       	breq	.+52     	; 0x1fa8 <__fixunssfsi+0x46>
    1f74:	66 0f       	add	r22, r22
    1f76:	77 1f       	adc	r23, r23
    1f78:	88 1f       	adc	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	1a f0       	brmi	.+6      	; 0x1f84 <__fixunssfsi+0x22>
    1f7e:	ba 95       	dec	r27
    1f80:	c9 f7       	brne	.-14     	; 0x1f74 <__fixunssfsi+0x12>
    1f82:	12 c0       	rjmp	.+36     	; 0x1fa8 <__fixunssfsi+0x46>
    1f84:	b1 30       	cpi	r27, 0x01	; 1
    1f86:	81 f0       	breq	.+32     	; 0x1fa8 <__fixunssfsi+0x46>
    1f88:	c3 d0       	rcall	.+390    	; 0x2110 <__fp_zero>
    1f8a:	b1 e0       	ldi	r27, 0x01	; 1
    1f8c:	08 95       	ret
    1f8e:	c0 c0       	rjmp	.+384    	; 0x2110 <__fp_zero>
    1f90:	67 2f       	mov	r22, r23
    1f92:	78 2f       	mov	r23, r24
    1f94:	88 27       	eor	r24, r24
    1f96:	b8 5f       	subi	r27, 0xF8	; 248
    1f98:	39 f0       	breq	.+14     	; 0x1fa8 <__fixunssfsi+0x46>
    1f9a:	b9 3f       	cpi	r27, 0xF9	; 249
    1f9c:	cc f3       	brlt	.-14     	; 0x1f90 <__fixunssfsi+0x2e>
    1f9e:	86 95       	lsr	r24
    1fa0:	77 95       	ror	r23
    1fa2:	67 95       	ror	r22
    1fa4:	b3 95       	inc	r27
    1fa6:	d9 f7       	brne	.-10     	; 0x1f9e <__fixunssfsi+0x3c>
    1fa8:	3e f4       	brtc	.+14     	; 0x1fb8 <__fixunssfsi+0x56>
    1faa:	90 95       	com	r25
    1fac:	80 95       	com	r24
    1fae:	70 95       	com	r23
    1fb0:	61 95       	neg	r22
    1fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb8:	08 95       	ret

00001fba <__floatunsisf>:
    1fba:	e8 94       	clt
    1fbc:	09 c0       	rjmp	.+18     	; 0x1fd0 <__floatsisf+0x12>

00001fbe <__floatsisf>:
    1fbe:	97 fb       	bst	r25, 7
    1fc0:	3e f4       	brtc	.+14     	; 0x1fd0 <__floatsisf+0x12>
    1fc2:	90 95       	com	r25
    1fc4:	80 95       	com	r24
    1fc6:	70 95       	com	r23
    1fc8:	61 95       	neg	r22
    1fca:	7f 4f       	sbci	r23, 0xFF	; 255
    1fcc:	8f 4f       	sbci	r24, 0xFF	; 255
    1fce:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd0:	99 23       	and	r25, r25
    1fd2:	a9 f0       	breq	.+42     	; 0x1ffe <__floatsisf+0x40>
    1fd4:	f9 2f       	mov	r31, r25
    1fd6:	96 e9       	ldi	r25, 0x96	; 150
    1fd8:	bb 27       	eor	r27, r27
    1fda:	93 95       	inc	r25
    1fdc:	f6 95       	lsr	r31
    1fde:	87 95       	ror	r24
    1fe0:	77 95       	ror	r23
    1fe2:	67 95       	ror	r22
    1fe4:	b7 95       	ror	r27
    1fe6:	f1 11       	cpse	r31, r1
    1fe8:	f8 cf       	rjmp	.-16     	; 0x1fda <__floatsisf+0x1c>
    1fea:	fa f4       	brpl	.+62     	; 0x202a <__floatsisf+0x6c>
    1fec:	bb 0f       	add	r27, r27
    1fee:	11 f4       	brne	.+4      	; 0x1ff4 <__floatsisf+0x36>
    1ff0:	60 ff       	sbrs	r22, 0
    1ff2:	1b c0       	rjmp	.+54     	; 0x202a <__floatsisf+0x6c>
    1ff4:	6f 5f       	subi	r22, 0xFF	; 255
    1ff6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff8:	8f 4f       	sbci	r24, 0xFF	; 255
    1ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffc:	16 c0       	rjmp	.+44     	; 0x202a <__floatsisf+0x6c>
    1ffe:	88 23       	and	r24, r24
    2000:	11 f0       	breq	.+4      	; 0x2006 <__floatsisf+0x48>
    2002:	96 e9       	ldi	r25, 0x96	; 150
    2004:	11 c0       	rjmp	.+34     	; 0x2028 <__floatsisf+0x6a>
    2006:	77 23       	and	r23, r23
    2008:	21 f0       	breq	.+8      	; 0x2012 <__floatsisf+0x54>
    200a:	9e e8       	ldi	r25, 0x8E	; 142
    200c:	87 2f       	mov	r24, r23
    200e:	76 2f       	mov	r23, r22
    2010:	05 c0       	rjmp	.+10     	; 0x201c <__floatsisf+0x5e>
    2012:	66 23       	and	r22, r22
    2014:	71 f0       	breq	.+28     	; 0x2032 <__floatsisf+0x74>
    2016:	96 e8       	ldi	r25, 0x86	; 134
    2018:	86 2f       	mov	r24, r22
    201a:	70 e0       	ldi	r23, 0x00	; 0
    201c:	60 e0       	ldi	r22, 0x00	; 0
    201e:	2a f0       	brmi	.+10     	; 0x202a <__floatsisf+0x6c>
    2020:	9a 95       	dec	r25
    2022:	66 0f       	add	r22, r22
    2024:	77 1f       	adc	r23, r23
    2026:	88 1f       	adc	r24, r24
    2028:	da f7       	brpl	.-10     	; 0x2020 <__floatsisf+0x62>
    202a:	88 0f       	add	r24, r24
    202c:	96 95       	lsr	r25
    202e:	87 95       	ror	r24
    2030:	97 f9       	bld	r25, 7
    2032:	08 95       	ret

00002034 <__fp_cmp>:
    2034:	99 0f       	add	r25, r25
    2036:	00 08       	sbc	r0, r0
    2038:	55 0f       	add	r21, r21
    203a:	aa 0b       	sbc	r26, r26
    203c:	e0 e8       	ldi	r30, 0x80	; 128
    203e:	fe ef       	ldi	r31, 0xFE	; 254
    2040:	16 16       	cp	r1, r22
    2042:	17 06       	cpc	r1, r23
    2044:	e8 07       	cpc	r30, r24
    2046:	f9 07       	cpc	r31, r25
    2048:	c0 f0       	brcs	.+48     	; 0x207a <__fp_cmp+0x46>
    204a:	12 16       	cp	r1, r18
    204c:	13 06       	cpc	r1, r19
    204e:	e4 07       	cpc	r30, r20
    2050:	f5 07       	cpc	r31, r21
    2052:	98 f0       	brcs	.+38     	; 0x207a <__fp_cmp+0x46>
    2054:	62 1b       	sub	r22, r18
    2056:	73 0b       	sbc	r23, r19
    2058:	84 0b       	sbc	r24, r20
    205a:	95 0b       	sbc	r25, r21
    205c:	39 f4       	brne	.+14     	; 0x206c <__fp_cmp+0x38>
    205e:	0a 26       	eor	r0, r26
    2060:	61 f0       	breq	.+24     	; 0x207a <__fp_cmp+0x46>
    2062:	23 2b       	or	r18, r19
    2064:	24 2b       	or	r18, r20
    2066:	25 2b       	or	r18, r21
    2068:	21 f4       	brne	.+8      	; 0x2072 <__fp_cmp+0x3e>
    206a:	08 95       	ret
    206c:	0a 26       	eor	r0, r26
    206e:	09 f4       	brne	.+2      	; 0x2072 <__fp_cmp+0x3e>
    2070:	a1 40       	sbci	r26, 0x01	; 1
    2072:	a6 95       	lsr	r26
    2074:	8f ef       	ldi	r24, 0xFF	; 255
    2076:	81 1d       	adc	r24, r1
    2078:	81 1d       	adc	r24, r1
    207a:	08 95       	ret

0000207c <__fp_inf>:
    207c:	97 f9       	bld	r25, 7
    207e:	9f 67       	ori	r25, 0x7F	; 127
    2080:	80 e8       	ldi	r24, 0x80	; 128
    2082:	70 e0       	ldi	r23, 0x00	; 0
    2084:	60 e0       	ldi	r22, 0x00	; 0
    2086:	08 95       	ret

00002088 <__fp_nan>:
    2088:	9f ef       	ldi	r25, 0xFF	; 255
    208a:	80 ec       	ldi	r24, 0xC0	; 192
    208c:	08 95       	ret

0000208e <__fp_pscA>:
    208e:	00 24       	eor	r0, r0
    2090:	0a 94       	dec	r0
    2092:	16 16       	cp	r1, r22
    2094:	17 06       	cpc	r1, r23
    2096:	18 06       	cpc	r1, r24
    2098:	09 06       	cpc	r0, r25
    209a:	08 95       	ret

0000209c <__fp_pscB>:
    209c:	00 24       	eor	r0, r0
    209e:	0a 94       	dec	r0
    20a0:	12 16       	cp	r1, r18
    20a2:	13 06       	cpc	r1, r19
    20a4:	14 06       	cpc	r1, r20
    20a6:	05 06       	cpc	r0, r21
    20a8:	08 95       	ret

000020aa <__fp_round>:
    20aa:	09 2e       	mov	r0, r25
    20ac:	03 94       	inc	r0
    20ae:	00 0c       	add	r0, r0
    20b0:	11 f4       	brne	.+4      	; 0x20b6 <__fp_round+0xc>
    20b2:	88 23       	and	r24, r24
    20b4:	52 f0       	brmi	.+20     	; 0x20ca <__fp_round+0x20>
    20b6:	bb 0f       	add	r27, r27
    20b8:	40 f4       	brcc	.+16     	; 0x20ca <__fp_round+0x20>
    20ba:	bf 2b       	or	r27, r31
    20bc:	11 f4       	brne	.+4      	; 0x20c2 <__fp_round+0x18>
    20be:	60 ff       	sbrs	r22, 0
    20c0:	04 c0       	rjmp	.+8      	; 0x20ca <__fp_round+0x20>
    20c2:	6f 5f       	subi	r22, 0xFF	; 255
    20c4:	7f 4f       	sbci	r23, 0xFF	; 255
    20c6:	8f 4f       	sbci	r24, 0xFF	; 255
    20c8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ca:	08 95       	ret

000020cc <__fp_split3>:
    20cc:	57 fd       	sbrc	r21, 7
    20ce:	90 58       	subi	r25, 0x80	; 128
    20d0:	44 0f       	add	r20, r20
    20d2:	55 1f       	adc	r21, r21
    20d4:	59 f0       	breq	.+22     	; 0x20ec <__fp_splitA+0x10>
    20d6:	5f 3f       	cpi	r21, 0xFF	; 255
    20d8:	71 f0       	breq	.+28     	; 0x20f6 <__fp_splitA+0x1a>
    20da:	47 95       	ror	r20

000020dc <__fp_splitA>:
    20dc:	88 0f       	add	r24, r24
    20de:	97 fb       	bst	r25, 7
    20e0:	99 1f       	adc	r25, r25
    20e2:	61 f0       	breq	.+24     	; 0x20fc <__fp_splitA+0x20>
    20e4:	9f 3f       	cpi	r25, 0xFF	; 255
    20e6:	79 f0       	breq	.+30     	; 0x2106 <__fp_splitA+0x2a>
    20e8:	87 95       	ror	r24
    20ea:	08 95       	ret
    20ec:	12 16       	cp	r1, r18
    20ee:	13 06       	cpc	r1, r19
    20f0:	14 06       	cpc	r1, r20
    20f2:	55 1f       	adc	r21, r21
    20f4:	f2 cf       	rjmp	.-28     	; 0x20da <__fp_split3+0xe>
    20f6:	46 95       	lsr	r20
    20f8:	f1 df       	rcall	.-30     	; 0x20dc <__fp_splitA>
    20fa:	08 c0       	rjmp	.+16     	; 0x210c <__fp_splitA+0x30>
    20fc:	16 16       	cp	r1, r22
    20fe:	17 06       	cpc	r1, r23
    2100:	18 06       	cpc	r1, r24
    2102:	99 1f       	adc	r25, r25
    2104:	f1 cf       	rjmp	.-30     	; 0x20e8 <__fp_splitA+0xc>
    2106:	86 95       	lsr	r24
    2108:	71 05       	cpc	r23, r1
    210a:	61 05       	cpc	r22, r1
    210c:	08 94       	sec
    210e:	08 95       	ret

00002110 <__fp_zero>:
    2110:	e8 94       	clt

00002112 <__fp_szero>:
    2112:	bb 27       	eor	r27, r27
    2114:	66 27       	eor	r22, r22
    2116:	77 27       	eor	r23, r23
    2118:	cb 01       	movw	r24, r22
    211a:	97 f9       	bld	r25, 7
    211c:	08 95       	ret

0000211e <__gesf2>:
    211e:	8a df       	rcall	.-236    	; 0x2034 <__fp_cmp>
    2120:	08 f4       	brcc	.+2      	; 0x2124 <__gesf2+0x6>
    2122:	8f ef       	ldi	r24, 0xFF	; 255
    2124:	08 95       	ret

00002126 <__mulsf3>:
    2126:	0b d0       	rcall	.+22     	; 0x213e <__mulsf3x>
    2128:	c0 cf       	rjmp	.-128    	; 0x20aa <__fp_round>
    212a:	b1 df       	rcall	.-158    	; 0x208e <__fp_pscA>
    212c:	28 f0       	brcs	.+10     	; 0x2138 <__mulsf3+0x12>
    212e:	b6 df       	rcall	.-148    	; 0x209c <__fp_pscB>
    2130:	18 f0       	brcs	.+6      	; 0x2138 <__mulsf3+0x12>
    2132:	95 23       	and	r25, r21
    2134:	09 f0       	breq	.+2      	; 0x2138 <__mulsf3+0x12>
    2136:	a2 cf       	rjmp	.-188    	; 0x207c <__fp_inf>
    2138:	a7 cf       	rjmp	.-178    	; 0x2088 <__fp_nan>
    213a:	11 24       	eor	r1, r1
    213c:	ea cf       	rjmp	.-44     	; 0x2112 <__fp_szero>

0000213e <__mulsf3x>:
    213e:	c6 df       	rcall	.-116    	; 0x20cc <__fp_split3>
    2140:	a0 f3       	brcs	.-24     	; 0x212a <__mulsf3+0x4>

00002142 <__mulsf3_pse>:
    2142:	95 9f       	mul	r25, r21
    2144:	d1 f3       	breq	.-12     	; 0x213a <__mulsf3+0x14>
    2146:	95 0f       	add	r25, r21
    2148:	50 e0       	ldi	r21, 0x00	; 0
    214a:	55 1f       	adc	r21, r21
    214c:	62 9f       	mul	r22, r18
    214e:	f0 01       	movw	r30, r0
    2150:	72 9f       	mul	r23, r18
    2152:	bb 27       	eor	r27, r27
    2154:	f0 0d       	add	r31, r0
    2156:	b1 1d       	adc	r27, r1
    2158:	63 9f       	mul	r22, r19
    215a:	aa 27       	eor	r26, r26
    215c:	f0 0d       	add	r31, r0
    215e:	b1 1d       	adc	r27, r1
    2160:	aa 1f       	adc	r26, r26
    2162:	64 9f       	mul	r22, r20
    2164:	66 27       	eor	r22, r22
    2166:	b0 0d       	add	r27, r0
    2168:	a1 1d       	adc	r26, r1
    216a:	66 1f       	adc	r22, r22
    216c:	82 9f       	mul	r24, r18
    216e:	22 27       	eor	r18, r18
    2170:	b0 0d       	add	r27, r0
    2172:	a1 1d       	adc	r26, r1
    2174:	62 1f       	adc	r22, r18
    2176:	73 9f       	mul	r23, r19
    2178:	b0 0d       	add	r27, r0
    217a:	a1 1d       	adc	r26, r1
    217c:	62 1f       	adc	r22, r18
    217e:	83 9f       	mul	r24, r19
    2180:	a0 0d       	add	r26, r0
    2182:	61 1d       	adc	r22, r1
    2184:	22 1f       	adc	r18, r18
    2186:	74 9f       	mul	r23, r20
    2188:	33 27       	eor	r19, r19
    218a:	a0 0d       	add	r26, r0
    218c:	61 1d       	adc	r22, r1
    218e:	23 1f       	adc	r18, r19
    2190:	84 9f       	mul	r24, r20
    2192:	60 0d       	add	r22, r0
    2194:	21 1d       	adc	r18, r1
    2196:	82 2f       	mov	r24, r18
    2198:	76 2f       	mov	r23, r22
    219a:	6a 2f       	mov	r22, r26
    219c:	11 24       	eor	r1, r1
    219e:	9f 57       	subi	r25, 0x7F	; 127
    21a0:	50 40       	sbci	r21, 0x00	; 0
    21a2:	8a f0       	brmi	.+34     	; 0x21c6 <__mulsf3_pse+0x84>
    21a4:	e1 f0       	breq	.+56     	; 0x21de <__mulsf3_pse+0x9c>
    21a6:	88 23       	and	r24, r24
    21a8:	4a f0       	brmi	.+18     	; 0x21bc <__mulsf3_pse+0x7a>
    21aa:	ee 0f       	add	r30, r30
    21ac:	ff 1f       	adc	r31, r31
    21ae:	bb 1f       	adc	r27, r27
    21b0:	66 1f       	adc	r22, r22
    21b2:	77 1f       	adc	r23, r23
    21b4:	88 1f       	adc	r24, r24
    21b6:	91 50       	subi	r25, 0x01	; 1
    21b8:	50 40       	sbci	r21, 0x00	; 0
    21ba:	a9 f7       	brne	.-22     	; 0x21a6 <__mulsf3_pse+0x64>
    21bc:	9e 3f       	cpi	r25, 0xFE	; 254
    21be:	51 05       	cpc	r21, r1
    21c0:	70 f0       	brcs	.+28     	; 0x21de <__mulsf3_pse+0x9c>
    21c2:	5c cf       	rjmp	.-328    	; 0x207c <__fp_inf>
    21c4:	a6 cf       	rjmp	.-180    	; 0x2112 <__fp_szero>
    21c6:	5f 3f       	cpi	r21, 0xFF	; 255
    21c8:	ec f3       	brlt	.-6      	; 0x21c4 <__mulsf3_pse+0x82>
    21ca:	98 3e       	cpi	r25, 0xE8	; 232
    21cc:	dc f3       	brlt	.-10     	; 0x21c4 <__mulsf3_pse+0x82>
    21ce:	86 95       	lsr	r24
    21d0:	77 95       	ror	r23
    21d2:	67 95       	ror	r22
    21d4:	b7 95       	ror	r27
    21d6:	f7 95       	ror	r31
    21d8:	e7 95       	ror	r30
    21da:	9f 5f       	subi	r25, 0xFF	; 255
    21dc:	c1 f7       	brne	.-16     	; 0x21ce <__mulsf3_pse+0x8c>
    21de:	fe 2b       	or	r31, r30
    21e0:	88 0f       	add	r24, r24
    21e2:	91 1d       	adc	r25, r1
    21e4:	96 95       	lsr	r25
    21e6:	87 95       	ror	r24
    21e8:	97 f9       	bld	r25, 7
    21ea:	08 95       	ret

000021ec <__mulsi3>:
    21ec:	62 9f       	mul	r22, r18
    21ee:	d0 01       	movw	r26, r0
    21f0:	73 9f       	mul	r23, r19
    21f2:	f0 01       	movw	r30, r0
    21f4:	82 9f       	mul	r24, r18
    21f6:	e0 0d       	add	r30, r0
    21f8:	f1 1d       	adc	r31, r1
    21fa:	64 9f       	mul	r22, r20
    21fc:	e0 0d       	add	r30, r0
    21fe:	f1 1d       	adc	r31, r1
    2200:	92 9f       	mul	r25, r18
    2202:	f0 0d       	add	r31, r0
    2204:	83 9f       	mul	r24, r19
    2206:	f0 0d       	add	r31, r0
    2208:	74 9f       	mul	r23, r20
    220a:	f0 0d       	add	r31, r0
    220c:	65 9f       	mul	r22, r21
    220e:	f0 0d       	add	r31, r0
    2210:	99 27       	eor	r25, r25
    2212:	72 9f       	mul	r23, r18
    2214:	b0 0d       	add	r27, r0
    2216:	e1 1d       	adc	r30, r1
    2218:	f9 1f       	adc	r31, r25
    221a:	63 9f       	mul	r22, r19
    221c:	b0 0d       	add	r27, r0
    221e:	e1 1d       	adc	r30, r1
    2220:	f9 1f       	adc	r31, r25
    2222:	bd 01       	movw	r22, r26
    2224:	cf 01       	movw	r24, r30
    2226:	11 24       	eor	r1, r1
    2228:	08 95       	ret

0000222a <__divmodhi4>:
    222a:	97 fb       	bst	r25, 7
    222c:	09 2e       	mov	r0, r25
    222e:	07 26       	eor	r0, r23
    2230:	0a d0       	rcall	.+20     	; 0x2246 <__divmodhi4_neg1>
    2232:	77 fd       	sbrc	r23, 7
    2234:	04 d0       	rcall	.+8      	; 0x223e <__divmodhi4_neg2>
    2236:	2e d0       	rcall	.+92     	; 0x2294 <__udivmodhi4>
    2238:	06 d0       	rcall	.+12     	; 0x2246 <__divmodhi4_neg1>
    223a:	00 20       	and	r0, r0
    223c:	1a f4       	brpl	.+6      	; 0x2244 <__divmodhi4_exit>

0000223e <__divmodhi4_neg2>:
    223e:	70 95       	com	r23
    2240:	61 95       	neg	r22
    2242:	7f 4f       	sbci	r23, 0xFF	; 255

00002244 <__divmodhi4_exit>:
    2244:	08 95       	ret

00002246 <__divmodhi4_neg1>:
    2246:	f6 f7       	brtc	.-4      	; 0x2244 <__divmodhi4_exit>
    2248:	90 95       	com	r25
    224a:	81 95       	neg	r24
    224c:	9f 4f       	sbci	r25, 0xFF	; 255
    224e:	08 95       	ret

00002250 <__udivmodsi4>:
    2250:	a1 e2       	ldi	r26, 0x21	; 33
    2252:	1a 2e       	mov	r1, r26
    2254:	aa 1b       	sub	r26, r26
    2256:	bb 1b       	sub	r27, r27
    2258:	fd 01       	movw	r30, r26
    225a:	0d c0       	rjmp	.+26     	; 0x2276 <__udivmodsi4_ep>

0000225c <__udivmodsi4_loop>:
    225c:	aa 1f       	adc	r26, r26
    225e:	bb 1f       	adc	r27, r27
    2260:	ee 1f       	adc	r30, r30
    2262:	ff 1f       	adc	r31, r31
    2264:	a2 17       	cp	r26, r18
    2266:	b3 07       	cpc	r27, r19
    2268:	e4 07       	cpc	r30, r20
    226a:	f5 07       	cpc	r31, r21
    226c:	20 f0       	brcs	.+8      	; 0x2276 <__udivmodsi4_ep>
    226e:	a2 1b       	sub	r26, r18
    2270:	b3 0b       	sbc	r27, r19
    2272:	e4 0b       	sbc	r30, r20
    2274:	f5 0b       	sbc	r31, r21

00002276 <__udivmodsi4_ep>:
    2276:	66 1f       	adc	r22, r22
    2278:	77 1f       	adc	r23, r23
    227a:	88 1f       	adc	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	1a 94       	dec	r1
    2280:	69 f7       	brne	.-38     	; 0x225c <__udivmodsi4_loop>
    2282:	60 95       	com	r22
    2284:	70 95       	com	r23
    2286:	80 95       	com	r24
    2288:	90 95       	com	r25
    228a:	9b 01       	movw	r18, r22
    228c:	ac 01       	movw	r20, r24
    228e:	bd 01       	movw	r22, r26
    2290:	cf 01       	movw	r24, r30
    2292:	08 95       	ret

00002294 <__udivmodhi4>:
    2294:	aa 1b       	sub	r26, r26
    2296:	bb 1b       	sub	r27, r27
    2298:	51 e1       	ldi	r21, 0x11	; 17
    229a:	07 c0       	rjmp	.+14     	; 0x22aa <__udivmodhi4_ep>

0000229c <__udivmodhi4_loop>:
    229c:	aa 1f       	adc	r26, r26
    229e:	bb 1f       	adc	r27, r27
    22a0:	a6 17       	cp	r26, r22
    22a2:	b7 07       	cpc	r27, r23
    22a4:	10 f0       	brcs	.+4      	; 0x22aa <__udivmodhi4_ep>
    22a6:	a6 1b       	sub	r26, r22
    22a8:	b7 0b       	sbc	r27, r23

000022aa <__udivmodhi4_ep>:
    22aa:	88 1f       	adc	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	5a 95       	dec	r21
    22b0:	a9 f7       	brne	.-22     	; 0x229c <__udivmodhi4_loop>
    22b2:	80 95       	com	r24
    22b4:	90 95       	com	r25
    22b6:	bc 01       	movw	r22, r24
    22b8:	cd 01       	movw	r24, r26
    22ba:	08 95       	ret

000022bc <_exit>:
    22bc:	f8 94       	cli

000022be <__stop_program>:
    22be:	ff cf       	rjmp	.-2      	; 0x22be <__stop_program>
